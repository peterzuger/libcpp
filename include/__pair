/** -*- mode: c++ -*-
 * @file   libcpp/include/__pair
 * @author Peter Züger
 * @date   26.10.2019
 * @brief  std::pair
 * @note   defined in header <utility>
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ____PAIR__
#define ____PAIR__

#include <__move>
#include <__tuple>
#include <cstddef>
#include <functional>
#include <type_traits>

namespace std{
    // 23.4.5, pair piecewise construction
    struct piecewise_construct_t{explicit piecewise_construct_t() = default;};
    inline constexpr piecewise_construct_t piecewise_construct{};

    // 23.4, class template pair
    template<class T1, class T2>
    struct pair{
        using first_type  = T1;
        using second_type = T2;

        T1 first;
        T2 second;

    private:
        static constexpr bool is_default_constructible = std::is_default_constructible_v<first_type> && std::is_default_constructible_v<second_type>;
        static constexpr bool is_nothrow_default_constructible = std::is_nothrow_default_constructible_v<first_type> && std::is_nothrow_default_constructible_v<second_type>;
        static constexpr bool is_copy_constructible = std::is_copy_constructible_v<first_type> && std::is_copy_constructible_v<second_type>;
        static constexpr bool is_nothrow_copy_constructible = std::is_nothrow_copy_constructible_v<first_type> && std::is_nothrow_copy_constructible_v<second_type>;
        static constexpr bool is_nothrow_swappable = std::is_nothrow_swappable_v<first_type> && std::is_nothrow_swappable_v<second_type>;

        template<class U1, class U2>
        static constexpr bool is_constructible = std::is_constructible_v<first_type, U1> && std::is_constructible_v<second_type, U2>;

        template<class U1, class U2>
        static constexpr bool is_nothrow_constructible = std::is_nothrow_constructible_v<first_type, U1> && std::is_nothrow_constructible_v<second_type, U2>;

    public:
        pair(const pair&) = default;
        pair(pair&&) = default;

        template<class = std::enable_if_t<is_default_constructible>>
        explicit constexpr pair()noexcept(is_nothrow_default_constructible):
            first{},
            second{}{}


        template<class = std::enable_if_t<is_copy_constructible>,
                 std::enable_if_t<std::is_convertible_v<const first_type&, first_type> &&
                                  std::is_convertible_v<const second_type&, second_type>, bool> = false>
        constexpr pair(const T1& x, const T2& y)
            noexcept(is_nothrow_copy_constructible):
            first{x},
            second{y}{}

        template<class = std::enable_if_t<is_copy_constructible>,
                 std::enable_if_t<!(std::is_convertible_v<const first_type&, first_type> &&
                                    std::is_convertible_v<const second_type&, second_type>), bool> = false>
        explicit constexpr pair(const T1& x, const T2& y)
            noexcept(is_nothrow_copy_constructible):
            first{x},
            second{y}{}


        template<class U1, class U2, class = std::enable_if_t<is_constructible<U1&&, U2&&>>,
                 std::enable_if_t<std::is_convertible_v<U1&&, first_type> &&
                                  std::is_convertible_v<U2&&, second_type>, bool> = false>
        constexpr pair(U1&& x, U2&& y)noexcept(is_nothrow_constructible<U1&&, U2&&>):
            first{std::forward<U1>(x)},
            second{std::forward<U2>(y)}{}

        template<class U1, class U2, class = std::enable_if_t<is_constructible<U1&&, U2&&>>,
                 std::enable_if_t<!(std::is_convertible_v<U1&&, first_type> &&
                                    std::is_convertible_v<U2&&, second_type>), bool> = false>
        explicit constexpr pair(U1&& x, U2&& y)noexcept(is_nothrow_constructible<U1&&, U2&&>):
            first{std::forward<U1>(x)},
            second{std::forward<U2>(y)}{}


        template<class U1, class U2, class = std::enable_if_t<is_constructible<const U1&, const U2&>>,
                 std::enable_if_t<std::is_convertible_v<const U1&, first_type> &&
                                  std::is_convertible_v<const U2&, second_type>, bool> = false>
        constexpr pair(const pair<U1, U2>& p)
            noexcept(is_nothrow_constructible<U1 const&, U2 const&>):
            first{p.first},
            second{p.second}{}

        template<class U1, class U2, class = std::enable_if_t<is_constructible<const U1&, const U2&>>,
                 std::enable_if_t<!(std::is_convertible_v<const U1&, first_type> &&
                                    std::is_convertible_v<const U2&, second_type>), bool> = false>
        explicit constexpr pair(const pair<U1, U2>& p)
            noexcept(is_nothrow_constructible<U1 const&, U2 const&>):
            first{p.first},
            second{p.second}{}


        template<class U1, class U2, class = std::enable_if_t<is_constructible<U1&&, U2&&>>,
                 std::enable_if_t<std::is_convertible_v<U1&&, first_type> &&
                                  std::is_convertible_v<U2&&, second_type>, bool> = false>
        constexpr pair(pair<U1, U2>&& p)
            noexcept(is_nothrow_constructible<U1&&, U2&&>):
            first{std::forward<U1>(p.first)},
            second{std::forward<U1>(p.second)}{}

        template<class U1, class U2, class = std::enable_if_t<is_constructible<U1&&, U2&&>>,
                 std::enable_if_t<!(std::is_convertible_v<U1&&, first_type> &&
                                    std::is_convertible_v<U2&&, second_type>), bool> = false>
        explicit constexpr pair(pair<U1, U2>&& p)
            noexcept(is_nothrow_constructible<U1&&, U2&&>):
            first{std::forward<U1>(p.first)},
            second{std::forward<U1>(p.second)}{}


        template<class... Args1, class... Args2>
        pair(piecewise_construct_t, tuple<Args1...> first_args, tuple<Args2...> second_args);


        std::enable_if_t<std::is_copy_assignable_v<first_type> &&
                         std::is_copy_assignable_v<second_type>, pair>&
        operator=(const pair& p)noexcept(std::is_nothrow_copy_assignable_v<first_type> &&
                                         std::is_nothrow_copy_assignable_v<second_type>){
            first = p.first;
            second = p.second;
            return *this;
        }

        template<class U1, class U2>
        std::enable_if_t<std::is_assignable_v<first_type&, const U1&> &&
                         std::is_assignable_v<second_type&, const U2&>, pair>&
        operator=(const pair<U1, U2>& p)noexcept(std::is_nothrow_assignable_v<first_type, const U1&> &&
                                                 std::is_nothrow_assignable_v<second_type, const U2&>){
            first = p.first;
            second = p.second;
            return *this;
        }

        std::enable_if_t<std::is_move_assignable_v<first_type> &&
                         std::is_move_assignable_v<second_type>, pair>&
        operator=(pair&& p)noexcept(std::is_nothrow_move_assignable_v<first_type> &&
                                    std::is_nothrow_move_assignable_v<second_type>){
            first = std::forward<first_type>(p.first);
            second = std::forward<second_type>(p.second);
            return *this;
        }

        template<class U1, class U2>
        std::enable_if_t<std::is_assignable_v<first_type&, U1&&> &&
                         std::is_assignable_v<second_type&, U2&&>, pair>&
        operator=(pair<U1, U2>&& p)noexcept(std::is_nothrow_assignable_v<first_type&, U1&&> &&
                                            std::is_nothrow_assignable_v<second_type&, U2&&>){
            first = std::forward<U1>(p.first);
            second = std::forward<U2>(p.second);
            return *this;
        }

        void swap(pair& p)noexcept(is_nothrow_swappable){
            using std::swap;
            swap(first, p.first);
            swap(second, p.second);
        }
    };

    template<class T1, class T2>
    pair(T1, T2) -> pair<T1, T2>;

    // 23.4.3, pair specialized algorithms
    template<class T1, class T2>
    constexpr bool operator==(const pair<T1, T2>& x, const pair<T1, T2>& y){
        return x.first == y.first && x.second == y.second;
    }

    template<class T1, class T2>
    constexpr bool operator< (const pair<T1, T2>& x, const pair<T1, T2>& y){
        return x.first < y.first || (!(y.first < x.first) && x.second < y.second);
    }

    template<class T1, class T2>
    constexpr bool operator!=(const pair<T1, T2>& x, const pair<T1, T2>& y){
        return !(x == y);
    }

    template<class T1, class T2>
    constexpr bool operator> (const pair<T1, T2>& x, const pair<T1, T2>& y){
        return y < x;
    }

    template<class T1, class T2>
    constexpr bool operator>=(const pair<T1, T2>& x, const pair<T1, T2>& y){
        return !(x < y);
    }

    template<class T1, class T2>
    constexpr bool operator<=(const pair<T1, T2>& x, const pair<T1, T2>& y){
        return !(y < x);
    }

    template<class T1, class T2>
    std::enable_if_t<std::is_swappable_v<T1> &&
                     std::is_swappable_v<T2>>
    swap(pair<T1, T2>& x, pair<T1, T2>& y)noexcept(noexcept(x.swap(y))){
        x.swap(y);
    }

    namespace impl{
        template<class T>
        struct __remove_reference_wrapper{
            using type = T;
        };

        template<class T>
        struct __remove_reference_wrapper<std::reference_wrapper<T>>{
            using type = T&;
        };
        template<class T>
        using __remove_reference_wrapper_t = typename __remove_reference_wrapper<T>::type;

        template<class T>
        using __make_pair_t = __remove_reference_wrapper_t<std::decay_t<T>>;
    }

    template<class T1, class T2>
    constexpr pair<impl::__make_pair_t<T1>,
                   impl::__make_pair_t<T2>> make_pair(T1&& x, T2&& y){
        return pair<impl::__make_pair_t<T1>,
                    impl::__make_pair_t<T2>>(std::forward<T1>(x), std::forward<T2>(y));
    }

    // 23.4.4, tuple-like access to pair
    template<class T1, class T2>
    class tuple_size<pair<T1, T2>>: std::integral_constant<std::size_t, 2>{};

    template<class T1, class T2>
    class tuple_element<0, pair<T1, T2>>{using type = T1;};

    template<class T1, class T2>
    class tuple_element<1, pair<T1, T2>>{using type = T2;};


    namespace impl{
        template<std::size_t I> struct __get_pair;

        template<>
        struct __get_pair<0>{
            template<class T1, class T2>
            static T1& get(pair<T1, T2>& p)noexcept{return p.first;}

            template<class T1, class T2>
            static const T1& get(const pair<T1, T2>& p)noexcept{return p.first;}
        };

        template<>
        struct __get_pair<1>{
            template<class T1, class T2>
            static T1& get(pair<T1, T2>& p)noexcept{return p.second;}

            template<class T1, class T2>
            static const T1& get(const pair<T1, T2>& p)noexcept{return p.second;}
        };
    }

    template<std::size_t I, class T1, class T2>
    constexpr tuple_element_t<I, pair<T1, T2>>& get(pair<T1, T2>& p)noexcept{
        return impl::__get_pair<I>(p);
    }

    template<std::size_t I, class T1, class T2>
    constexpr tuple_element_t<I, pair<T1, T2>>&& get(pair<T1, T2>&& p)noexcept{
        return impl::__get_pair<I>(std::move(p));
    }

    template<std::size_t I, class T1, class T2>
    constexpr const tuple_element_t<I, pair<T1, T2>>& get(const pair<T1, T2>& p)noexcept{
        return impl::__get_pair<I>(p);
    }

    template<std::size_t I, class T1, class T2>
    constexpr const tuple_element_t<I, pair<T1, T2>>&& get(const pair<T1, T2>&& p)noexcept{
        return impl::__get_pair<I>(std::move(p));
    }


    template<class T1, class T2>
    constexpr std::enable_if_t<!std::is_same_v<T1, T2> ,T1>& get(pair<T1, T2>& p)noexcept{
        return impl::__get_pair<0>(p);
    }

    template<class T1, class T2>
    constexpr const std::enable_if_t<!std::is_same_v<T1, T2> ,T1>& get(const pair<T1, T2>& p)noexcept{
        return impl::__get_pair<0>(p);
    }

    template<class T1, class T2>
    constexpr std::enable_if_t<!std::is_same_v<T1, T2> ,T1>&& get(pair<T1, T2>&& p)noexcept{
        return impl::__get_pair<0>(std::move(p));
    }

    template<class T1, class T2>
    constexpr const std::enable_if_t<!std::is_same_v<T1, T2> ,T1>&& get(const pair<T1, T2>&& p)noexcept{
        return impl::__get_pair<0>(std::move(p));
    }


    template<class T2, class T1>
    constexpr std::enable_if_t<!std::is_same_v<T1, T2> ,T2>& get(pair<T1, T2>& p)noexcept{
        return impl::__get_pair<1>(p);
    }

    template<class T2, class T1>
    constexpr const std::enable_if_t<!std::is_same_v<T1, T2> ,T2>& get(const pair<T1, T2>& p)noexcept{
        return impl::__get_pair<1>(p);
    }

    template<class T2, class T1>
    constexpr std::enable_if_t<!std::is_same_v<T1, T2> ,T2>&& get(pair<T1, T2>&& p)noexcept{
        return impl::__get_pair<1>(std::move(p));
    }

    template<class T2, class T1>
    constexpr const std::enable_if_t<!std::is_same_v<T1, T2> ,T2>&& get(const pair<T1, T2>&& p)noexcept{
        return impl::__get_pair<1>(std::move(p));
    }
}

#endif /* ____PAIR__ */
