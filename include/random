/** -*- mode: c++ -*-
 * @file   libcpp/include/random
 * @author Peter Züger
 * @date   09.01.2020
 * @brief  Random number generation
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __RANDOM__
#define __RANDOM__

#include <cstdint>
#include <initializer_list>
#include <limits>
#include <string>
#include <vector>

namespace std{
    // 29.6.3.1, class template linear_congruential_engine
    template<class UIntType, UIntType a, UIntType c, UIntType m>
    class linear_congruential_engine{
    public:
        // types
        using result_type = UIntType;

        // engine characteristics
        static constexpr result_type multiplier = a;
        static constexpr result_type increment = c;
        static constexpr result_type modulus = m;
        static constexpr result_type min(){
            return c == 0u ? 1u: 0u;
        }
        static constexpr result_type max(){
            return m - 1u;
        }
        static constexpr result_type default_seed = 1u;

        // constructors and seeding functions
        explicit linear_congruential_engine(result_type s = default_seed);

        template<class Sseq>
        explicit linear_congruential_engine(Sseq& q);

        void seed(result_type s = default_seed);

        template<class Sseq>
        void seed(Sseq& q);

        // generating functions
        result_type operator()();
        void discard(unsigned long long z);
    };

    // 29.6.3.2, class template mersenne_twister_engine
    template<class UIntType, size_t w, size_t n, size_t m, size_t r,
             UIntType a, size_t u, UIntType d, size_t s,
             UIntType b, size_t t, UIntType c, size_t l, UIntType f>
    class mersenne_twister_engine{
    public:
        // types
        using result_type = UIntType;

        // engine characteristics
        static constexpr size_t word_size = w;
        static constexpr size_t state_size = n;
        static constexpr size_t shift_size = m;
        static constexpr size_t mask_bits = r;
        static constexpr UIntType xor_mask = a;
        static constexpr size_t tempering_u = u;
        static constexpr UIntType tempering_d = d;
        static constexpr size_t tempering_s = s;
        static constexpr UIntType tempering_b = b;
        static constexpr size_t tempering_t = t;
        static constexpr UIntType tempering_c = c;
        static constexpr size_t tempering_l = l;
        static constexpr UIntType initialization_multiplier = f;
        static constexpr result_type min(){
            return 0;
        }
        static constexpr result_type max(){
            return (result_type(1) << w) - 1;
        }
        static constexpr result_type default_seed = 5489u;

        // constructors and seeding functions
        explicit mersenne_twister_engine(result_type value = default_seed);

        template<class Sseq>
        explicit mersenne_twister_engine(Sseq& q);

        void seed(result_type value = default_seed);

        template<class Sseq>
        void seed(Sseq& q);

        // generating functions
        result_type operator()();
        void discard(unsigned long long z);
    };

    // 29.6.3.3, class template subtract_with_carry_engine
    template<class UIntType, size_t w, size_t s, size_t r>
    class subtract_with_carry_engine{
    public:
        // types
        using result_type = UIntType;

        // engine characteristics
        static constexpr size_t word_size = w;
        static constexpr size_t short_lag = s;
        static constexpr size_t long_lag = r;
        static constexpr result_type min(){
            return 0;
        }
        static constexpr result_type max(){
            return (result_type(1) << w) - 1;
        }
        static constexpr result_type default_seed = 19780503u;

        // constructors and seeding functions
        explicit subtract_with_carry_engine(result_type value = default_seed);

        template<class Sseq>
        explicit subtract_with_carry_engine(Sseq& q);

        void seed(result_type value = default_seed);

        template<class Sseq>
        void seed(Sseq& q);

        // generating functions
        result_type operator()();
        void discard(unsigned long long z);
    };

    // 29.6.4.2, class template discard_block_engine
    template<class Engine, size_t p, size_t r>
    class discard_block_engine{
    public:
        // types
        using result_type = typename Engine::result_type;

        // engine characteristics
        static constexpr size_t block_size = p;
        static constexpr size_t used_block = r;
        static constexpr result_type min(){
            return Engine::min();
        }
        static constexpr result_type max(){
            return Engine::max();
        }

        // constructors and seeding functions
        discard_block_engine();
        explicit discard_block_engine(const Engine& e);
        explicit discard_block_engine(Engine&& e);
        explicit discard_block_engine(result_type s);

        template<class Sseq>
        explicit discard_block_engine(Sseq& q);

        void seed();
        void seed(result_type s);

        template<class Sseq>
        void seed(Sseq& q);

        // generating functions
        result_type operator()();
        void discard(unsigned long long z);

        // property functions
        const Engine& base()const noexcept{
            return e;
        };

    private:
        Engine e;
        int n;
    };

    // 29.6.4.3, class template independent_bits_engine
    template<class Engine, size_t w, class UIntType>
    class independent_bits_engine{
    public:
        // types
        using result_type = UIntType;

        // engine characteristics
        static constexpr result_type min(){
            return 0;
        }
        static constexpr result_type max(){
            return (result_type(1) << w) - 1;
        }

        // constructors and seeding functions
        independent_bits_engine();
        explicit independent_bits_engine(const Engine& e);
        explicit independent_bits_engine(Engine&& e);
        explicit independent_bits_engine(result_type s);

        template<class Sseq>
        explicit independent_bits_engine(Sseq& q);

        void seed();
        void seed(result_type s);

        template<class Sseq>
        void seed(Sseq& q);

        // generating functions
        result_type operator()();
        void discard(unsigned long long z);

        // property functions
        const Engine& base()const noexcept{
            return e;
        };

    private:
        Engine e;
    };

    // 29.6.4.4, class template shuffle_order_engine
    template<class Engine, size_t k>
    class shuffle_order_engine{
    public:
        // types
        using result_type = typename Engine::result_type;

        // engine characteristics
        static constexpr size_t table_size = k;
        static constexpr result_type min(){
            return Engine::min();
        }
        static constexpr result_type max(){
            return Engine::max();
        }

        // constructors and seeding functions
        shuffle_order_engine();
        explicit shuffle_order_engine(const Engine& e);
        explicit shuffle_order_engine(Engine&& e);
        explicit shuffle_order_engine(result_type s);

        template<class Sseq>
        explicit shuffle_order_engine(Sseq& q);

        void seed();
        void seed(result_type s);

        template<class Sseq>
        void seed(Sseq& q);

        // generating functions
        result_type operator()();
        void discard(unsigned long long z);

        // property functions
        const Engine& base()const noexcept{
            return e;
        };

    private:
        Engine e;
        result_type V[k];
        result_type Y;
    };

    // 29.6.5, engines and engine adaptors with predefined parameters
    using minstd_rand0  = linear_congruential_engine<uint_fast32_t, 16807, 0, 2147483647>;;
    using minstd_rand   = linear_congruential_engine<uint_fast32_t, 48271, 0, 2147483647>;
    using mt19937       = mersenne_twister_engine<uint_fast32_t,
                                                  32, 624, 397, 31,
                                                  0x9908b0df, 11,
                                                  0xffffffff, 7,
                                                  0x9d2c5680, 15,
                                                  0xefc60000, 18,
                                                  1812433253>;
    using mt19937_64    = mersenne_twister_engine<uint_fast64_t,
                                                  64, 312, 156, 31,
                                                  0xb5026f5aa96619e9, 29,
                                                  0x5555555555555555, 17,
                                                  0x71d67fffeda60000, 37,
                                                  0xfff7eee000000000, 43,
                                                  6364136223846793005>;
    using ranlux24_base = subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>;
    using ranlux48_base = subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>;
    using ranlux24      = discard_block_engine<ranlux24_base, 223, 23>;
    using ranlux48      = discard_block_engine<ranlux48_base, 389, 11>;
    using knuth_b       = shuffle_order_engine<minstd_rand0,256>;
    using default_random_engine = minstd_rand;

    // 29.6.6, classrandom_device
    class random_device{
    public:
        // types
        using result_type = unsigned int;

        // generator characteristics
        static constexpr result_type min(){
            return std::numeric_limits<result_type>::min();
        }
        static constexpr result_type max(){
            return std::numeric_limits<result_type>::max();
        }

        // constructors
        explicit random_device(const std::string& token = "random");

        // generating functions
        result_type operator()();

        // property functions
        double entropy()const noexcept;

        // no copy functions
        random_device(const random_device& ) = delete;
        void operator=(const random_device& ) = delete;
    };

    // 29.6.7.1, class seed_seq
    class seed_seq{
    public:
        // types
        using result_type = uint_least32_t;

        // constructors
        seed_seq();

        template<class T>
        seed_seq(initializer_list<T> il);

        template<class InputIterator>
        seed_seq(InputIterator begin, InputIterator end);

        // generating functions
        template<class RandomAccessIterator>
        void generate(RandomAccessIterator begin, RandomAccessIterator end);

        // property functions
        size_t size()const noexcept;

        template<class OutputIterator>
        void param(OutputIterator dest)const;

        // no copy functions
        seed_seq(const seed_seq& ) = delete;
        void operator=(const seed_seq& ) = delete;

    private:
        std::vector<result_type> v;
    };

    // 29.6.7.2, function template generate_canonical
    template<class RealType, size_t bits, class URBG>
    RealType generate_canonical(URBG& g);

    // 29.6.8.2.1, class template uniform_int_distribution
    template<class IntType = int>
    class uniform_int_distribution{
    public:
        // types
        using result_type = IntType;
        using param_type  = int;

        // constructors and reset functions
        explicit uniform_int_distribution(IntType a = 0, IntType b = std::numeric_limits<IntType>::max());
        explicit uniform_int_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        result_type a()const;
        result_type b()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.2.2, class template uniform_real_distribution
    template<class RealType = double>
    class uniform_real_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructors and reset functions
        explicit uniform_real_distribution(RealType a = 0.0, RealType b = 1.0);
        explicit uniform_real_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        result_type a()const;
        result_type b()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.3.1, class bernoulli_distribution
    class bernoulli_distribution{
    public:
        // types
        using result_type = bool;
        using param_type  = int;

        // constructors and reset functions
        explicit bernoulli_distribution(double p = 0.5);
        explicit bernoulli_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        double p()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.3.2, class template binomial_distribution
    template<class IntType = int>
    class binomial_distribution{
    public:
        // types
        using result_type = IntType;
        using param_type  = int;

        // constructors and reset functions
        explicit binomial_distribution(IntType t = 1, double p = 0.5);
        explicit binomial_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        IntType t()const;
        double p()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.3.3, class template geometric_distribution
    template<class IntType = int>
    class geometric_distribution{
    public:
        // types
        using result_type = IntType;
        using param_type  = int;

        // constructors and reset functions
        explicit geometric_distribution(double p = 0.5);
        explicit geometric_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        double p()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.3.4, class template negative_binomial_distribution
    template<class IntType = int>
    class negative_binomial_distribution{
    public:
        // types
        using result_type = IntType;
        using param_type  = int;

        // constructor and reset functions
        explicit negative_binomial_distribution(IntType k = 1, double p = 0.5);
        explicit negative_binomial_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        IntType k()const;
        double p()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.4.1, class template poisson_distribution
    template<class IntType = int>
    class poisson_distribution{
    public:
        // types
        using result_type = IntType;
        using param_type  = int;

        // constructors and reset functions
        explicit poisson_distribution(double mean = 1.0);
        explicit poisson_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        double mean()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.4.2, class template exponential_distribution
    template<class RealType = double>
    class exponential_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  =int;

        // constructors and reset functions
        explicit exponential_distribution(RealType lambda = 1.0);
        explicit exponential_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType lambda()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.4.3, class template gamma_distribution
    template<class RealType = double>
    class gamma_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructors and reset functions
        explicit gamma_distribution(RealType alpha = 1.0, RealType beta = 1.0);
        explicit gamma_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType alpha()const;
        RealType beta()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.4.4, class template weibull_distribution
    template<class RealType = double>
    class weibull_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructor and reset functions
        explicit weibull_distribution(RealType a = 1.0, RealType b = 1.0);
        explicit weibull_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);
        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType a()const;
        RealType b()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.4.5, class template extreme_value_distribution
    template<class RealType = double>
    class extreme_value_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructor and reset functions
        explicit extreme_value_distribution(RealType a = 0.0, RealType b = 1.0);
        explicit extreme_value_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType a()const;
        RealType b()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.5.1, class template normal_distribution
    template<class RealType = double>
    class normal_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructors and reset functions
        explicit normal_distribution(RealType mean = 0.0, RealType stddev = 1.0);
        explicit normal_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType mean()const;
        RealType stddev()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.5.2, class template lognormal_distribution
    template<class RealType = double>
    class lognormal_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructor and reset functions
        explicit lognormal_distribution(RealType m = 0.0, RealType s = 1.0);
        explicit lognormal_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType m()const;
        RealType s()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.5.3, class template chi_squared_distribution
    template<class RealType = double>
    class chi_squared_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructor and reset functions
        explicit chi_squared_distribution(RealType n = 1);
        explicit chi_squared_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType n()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.5.4, class template cauchy_distribution
    template<class RealType = double>
    class cauchy_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  =int;

        // constructor and reset functions
        explicit cauchy_distribution(RealType a = 0.0, RealType b = 1.0);
        explicit cauchy_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType a()const;
        RealType b()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.5.5, class template fisher_f_distribution
    template<class RealType = double>
    class fisher_f_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructor and reset functions
        explicit fisher_f_distribution(RealType m = 1, RealType n = 1);
        explicit fisher_f_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType m()const;
        RealType n()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.5.6, class template student_t_distribution
    template<class RealType = double>
    class student_t_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  =int;

        // constructor and reset functions
        explicit student_t_distribution(RealType n = 1);
        explicit student_t_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        RealType n()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.6.1, class template discrete_distribution
    template<class IntType = int>
    class discrete_distribution{
    public:
        // types
        using result_type = IntType;
        using param_type  = int;

        // constructor and reset functions
        discrete_distribution();

        template<class InputIterator>
        discrete_distribution(InputIterator firstW, InputIterator lastW);

        discrete_distribution(initializer_list<double> wl);

        template<class UnaryOperation>
        discrete_distribution(size_t nw, double xmin, double xmax, UnaryOperation fw);

        explicit discrete_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        std::vector<double> probabilities()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.6.2, class template piecewise_constant_distribution
    template<class RealType = double>
    class piecewise_constant_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructor and reset functions
        piecewise_constant_distribution();

        template<class InputIteratorB, class InputIteratorW>
        piecewise_constant_distribution(InputIteratorB firstB, InputIteratorB lastB,InputIteratorW firstW);

        template<class UnaryOperation>
        piecewise_constant_distribution(initializer_list<RealType> bl, UnaryOperation fw);

        template<class UnaryOperation>
        piecewise_constant_distribution(size_t nw, RealType xmin, RealType xmax,UnaryOperation fw);

        explicit piecewise_constant_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        std::vector<result_type> intervals()const;
        std::vector<result_type> densities()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };

    // 29.6.8.6.3, class template piecewise_linear_distribution
    template<class RealType = double>
    class piecewise_linear_distribution{
    public:
        // types
        using result_type = RealType;
        using param_type  = int;

        // constructor and reset functions
        piecewise_linear_distribution();

        template<class InputIteratorB, class InputIteratorW>
        piecewise_linear_distribution(InputIteratorB firstB, InputIteratorB lastB,InputIteratorW firstW);

        template<class UnaryOperation>
        piecewise_linear_distribution(initializer_list<RealType> bl, UnaryOperation fw);

        template<class UnaryOperation>
        piecewise_linear_distribution(size_t nw, RealType xmin, RealType xmax, UnaryOperation fw);

        explicit piecewise_linear_distribution(const param_type& parm);

        void reset();

        // generating functions
        template<class URBG>
        result_type operator()(URBG& g);

        template<class URBG>
        result_type operator()(URBG& g, const param_type& parm);

        // property functions
        std::vector<result_type> intervals()const;
        std::vector<result_type> densities()const;

        param_type param()const;
        void param(const param_type& parm);

        result_type min()const;
        result_type max()const;
    };
}

#endif /* __RANDOM__ */
