/** -*- mode: c++ -*-
 * @file   libcpp/include/execution
 * @author Peter Züger
 * @date   14.05.2019
 * @brief  Execution policies
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __EXECUTION__
#define __EXECUTION__

#include <type_traits>

namespace std{
    namespace execution{
        // 23.19.4, sequenced execution policy
        class sequenced_policy{};

        // 23.19.5, parallel execution policy
        class parallel_policy{};

        // 23.19.6, parallel and unsequenced execution policy
        class parallel_unsequenced_policy{};

        // 23.19.7, execution policy objects
        inline constexpr sequenced_policy            seq{};
        inline constexpr parallel_policy             par{};
        inline constexpr parallel_unsequenced_policy par_unseq{};
    }

    // 23.19.3, execution policy type trait
    template<class T> struct is_execution_policy: public std::false_type{};
    template<> struct is_execution_policy<execution::sequenced_policy>: public std::true_type{};
    template<> struct is_execution_policy<execution::parallel_policy>: public std::true_type{};
    template<> struct is_execution_policy<execution::parallel_unsequenced_policy>: public std::true_type{};

    template<class T>
    inline constexpr bool is_execution_policy_v = is_execution_policy<T>::value;
}

#endif /* __EXECUTION__ */
