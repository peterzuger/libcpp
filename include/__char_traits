/**
 * @file   __char_traits
 * @author Peter Züger
 * @date   20.10.2019
 * @brief  std::char_traits
 * @note   defined in header <string>
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ____CHAR_TRAITS__
#define ____CHAR_TRAITS__

#include <cstdint>
#include <cstdio>
#include <cstring>
#include <cwchar>
#include <iosfwd>
#include <types/streamoff>

namespace std{
    // 24.2, character traits
    template<class charT>
    struct char_traits{
        using char_type  = charT;
        using int_type   = int;
        using off_type   = std::streamoff;
        using pos_type   = std::streampos;
        using state_type = std::mbstate_t;

        static constexpr void assign(char_type& c1, const char_type& c2)noexcept{
            c1 = c2;
        }
        static constexpr bool eq(char_type c1, char_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr bool lt(char_type c1, char_type c2)noexcept{
            return c1 < c2;
        }

        static constexpr int compare(const char_type* s1, const char_type* s2, size_t n){
            if(n == 0)
                return 0;
            for(; n; --n, ++s1, ++s2){
                if(lt(*s1, *s2))
                    return -1;
                if(lt(*s2, *s1))
                    return 1;
            }
            return 0;
        }
        static constexpr size_t length(const char_type* s){
            size_t len = 0;
            for(; !eq(*s, char_type(0)); ++s)
                ++len;
            return len;
        }
        static constexpr const char_type* find(const char_type* s, size_t n,
                                               const char_type& a){
            if(n == 0)
                return nullptr;
            for(; n; n--){
                if(eq(*s, a))
                    return s;
                s++;
            }
            return nullptr;
        }
        static char_type* move(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            if(s1 < s2){
                for (; n; --n, ++s1, ++s2)
                    assign(*s1, *s2);
            }else if(s2 < s1){
                s1 += n;
                s2 += n;
                for (; n; --n)
                    assign(*--s1, *--s2);
            }
            return r;
        }
        static char_type* copy(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            for (; n; --n, ++s1, ++s2)
                assign(*s1, *s2);
            return r;
        }
        static char_type* assign(char_type* s, size_t n, char_type a){
            char_type* r = s;
            for (; n; --n, ++s)
                assign(*s, a);
            return r;
        }

        static constexpr int_type not_eof(int_type c)noexcept{
            return eq_int_type(c, eof()) ? ~eof() : c;
        }
        static constexpr char_type to_char_type(int_type c)noexcept{
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c)noexcept{
            return int_type(c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr int_type eof()noexcept{
            return int_type(EOF);
        }
    };

    template<>
    struct char_traits<char>{
        using char_type  = char;
        using int_type   = int;
        using off_type   = std::streamoff;
        using pos_type   = std::streampos;
        using state_type = std::mbstate_t;

        static constexpr void assign(char_type& c1, const char_type& c2)noexcept{
            c1 = c2;
        }
        static constexpr bool eq(char_type c1, char_type c2)noexcept{
            return (unsigned char)c1 == (unsigned char)c2;
        }
        static constexpr bool lt(char_type c1, char_type c2)noexcept{
            return (unsigned char)c1 < (unsigned char)c2;
        }

        static constexpr int compare(const char_type* s1, const char_type* s2, size_t n){
            if(n == 0)
                return 0;
            for(; n; --n, ++s1, ++s2){
                if(lt(*s1, *s2))
                    return -1;
                if(lt(*s2, *s1))
                    return 1;
            }
            return 0;
        }
        static constexpr size_t length(const char_type* s){
            size_t len = 0;
            for(; !eq(*s, char_type(0)); ++s)
                ++len;
            return len;
        }
        static constexpr const char_type* find(const char_type* s, size_t n,
                                               const char_type& a){
            if(n == 0)
                return nullptr;
            for(; n; n--){
                if(eq(*s, a))
                    return s;
                s++;
            }
            return nullptr;
        }
        static char_type* move(char_type* s1, const char_type* s2, size_t n){
            return n == 0 ? s1 : (char_type*) std::memmove(s1, s2, n);
        }
        static char_type* copy(char_type* s1, const char_type* s2, size_t n){
            return n == 0 ? s1 : (char_type*) std::memcpy(s1, s2, n);
        }
        static char_type* assign(char_type* s, size_t n, char_type a){
            return n == 0 ? s : (char_type*) std::memset(s, to_int_type(a), n);
        }

        static constexpr int_type not_eof(int_type c)noexcept{
            return eq_int_type(c, eof()) ? ~eof() : c;
        }
        static constexpr char_type to_char_type(int_type c)noexcept{
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c)noexcept{
            return int_type((unsigned char)c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr int_type eof()noexcept{
            return int_type(EOF);
        }
    };

#if defined(char8_t)
    template<>
    struct char_traits<char8_t>{
        using char_type  = char8_t;
        using int_type   = int;
        using off_type   = streamoff;
        using pos_type   = streampos;
        using state_type = mbstate_t;

        static constexpr void assign(char_type& c1, const char_type& c2)noexcept{
            (unsigned char)c1 = (unsigned char)c2;
        }
        static constexpr bool eq(char_type c1, char_type c2)noexcept{
            return (unsigned char)c1 == (unsigned char)c2;
        }
        static constexpr bool lt(char_type c1, char_type c2)noexcept{
            return (unsigned char)c1 < (unsigned char)c2;
        }

        static constexpr int compare(const char_type* s1, const char_type* s2, size_t n){
            if(n == 0)
                return 0;
            for(; n; --n, ++s1, ++s2){
                if(lt(*s1, *s2))
                    return -1;
                if(lt(*s2, *s1))
                    return 1;
            }
            return 0;
        }
        static constexpr size_t length(const char_type* s){
            return std::strlen(s);
        }
        static constexpr const char_type* find(const char_type* s, size_t n,
                                               const char_type& a){
            if(n == 0)
                return nullptr;
            for(; n; n--){
                if(eq(*s, a))
                    return s;
                s++;
            }
            return nullptr;
        }
        static char_type* move(char_type* s1, const char_type* s2, size_t n){
            return n == 0 ? s1 : (char_type*) std::memmove(s1, s2, n);
        }
        static char_type* copy(char_type* s1, const char_type* s2, size_t n){
            return n == 0 ? s1 : (char_type*) std::memcpy(s1, s2, n);
        }
        static char_type* assign(char_type* s, size_t n, char_type a){
            return n == 0 ? s : (char_type*) std::memset(s, to_int_type(a), n);
        }

        static constexpr int_type not_eof(int_type c)noexcept{
            return eq_int_type(c, eof()) ? ~eof() : c;
        }
        static constexpr char_type to_char_type(int_type c)noexcept{
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c)noexcept{
            return int_type((unsigned char)c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr int_type eof()noexcept{
            return int_type(EOF);
        }
    };
#endif /* defined(char8_t) */

    template<>
    struct char_traits<char16_t>{
        using char_type  = char16_t;
        using int_type   = std::uint_least16_t;
        using off_type   = std::streamoff;
        using pos_type   = std::u16streampos;
        using state_type = std::mbstate_t;

        static constexpr void assign(char_type& c1, const char_type& c2)noexcept{
            c1 = c2;
        }
        static constexpr bool eq(char_type c1, char_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr bool lt(char_type c1, char_type c2)noexcept{
            return c1 < c2;
        }

        static constexpr int compare(const char_type* s1, const char_type* s2, size_t n){
            if(n == 0)
                return 0;
            for(; n; --n, ++s1, ++s2){
                if(lt(*s1, *s2))
                    return -1;
                if(lt(*s2, *s1))
                    return 1;
            }
            return 0;
        }
        static constexpr size_t length(const char_type* s){
            size_t len = 0;
            for(; !eq(*s, char_type(0)); ++s)
                ++len;
            return len;
        }
        static constexpr const char_type* find(const char_type* s, size_t n,
                                               const char_type& a){
            if(n == 0)
                return nullptr;
            for(; n; --n){
                if (eq(*s, a))
                    return s;
                ++s;
            }
            return 0;
        }
        static char_type* move(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            if(s1 < s2){
                for (; n; --n, ++s1, ++s2)
                    assign(*s1, *s2);
            }else if(s2 < s1){
                s1 += n;
                s2 += n;
                for (; n; --n)
                    assign(*--s1, *--s2);
            }
            return r;
        }
        static char_type* copy(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            for(; n; --n, ++s1, ++s2)
                assign(*s1, *s2);
            return r;
        }
        static char_type* assign(char_type* s, size_t n, char_type a){
            char_type* r = s;
            for(; n; --n, ++s)
                assign(*s, a);
            return r;
        }

        static constexpr int_type not_eof(int_type c)noexcept{
            return eq_int_type(c, eof()) ? int_type(~eof()) : c;
        }
        static constexpr char_type to_char_type(int_type c)noexcept{
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c)noexcept{
            return int_type(c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr int_type eof()noexcept{
            return int_type(0xFFFF);
        }
    };

    template<>
    struct char_traits<char32_t>{
        using char_type  = char32_t;
        using int_type   = std::uint_least32_t;
        using off_type   = std::streamoff;
        using pos_type   = std::u32streampos;
        using state_type = std::mbstate_t;

        static constexpr void assign(char_type& c1, const char_type& c2)noexcept{
            c1 = c2;
        }
        static constexpr bool eq(char_type c1, char_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr bool lt(char_type c1, char_type c2)noexcept{
            return c1 < c2;
        }

        static constexpr int compare(const char_type* s1, const char_type* s2, size_t n){
            if(n == 0)
                return 0;
            for(; n; --n, ++s1, ++s2){
                if(lt(*s1, *s2))
                    return -1;
                if(lt(*s2, *s1))
                    return 1;
            }
            return 0;
        }
        static constexpr size_t length(const char_type* s){
            size_t len = 0;
            for(; !eq(*s, char_type(0)); ++s)
                ++len;
            return len;
        }
        static constexpr const char_type* find(const char_type* s, size_t n,
                                               const char_type& a){
            if(n == 0)
                return nullptr;
            for(; n; --n){
                if (eq(*s, a))
                    return s;
                ++s;
            }
            return 0;
        }
        static char_type* move(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            if(s1 < s2){
                for (; n; --n, ++s1, ++s2)
                    assign(*s1, *s2);
            }else if(s2 < s1){
                s1 += n;
                s2 += n;
                for (; n; --n)
                    assign(*--s1, *--s2);
            }
            return r;
        }
        static char_type* copy(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            for(; n; --n, ++s1, ++s2)
                assign(*s1, *s2);
            return r;
        }
        static char_type* assign(char_type* s, size_t n, char_type a){
            char_type* r = s;
            for(; n; --n, ++s)
                assign(*s, a);
            return r;
        }

        static constexpr int_type not_eof(int_type c)noexcept{
            return eq_int_type(c, eof()) ? ~eof() : c;
        }
        static constexpr char_type to_char_type(int_type c)noexcept{
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c)noexcept{
            return int_type(c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr int_type eof()noexcept{
            return int_type(0xFFFFFFFF);
        }
    };

    template<> struct char_traits<wchar_t> {
        using char_type  = wchar_t;
        using int_type   = std::wint_t;
        using off_type   = std::streamoff;
        using pos_type   = std::wstreampos;
        using state_type = std::mbstate_t;

        static constexpr void assign(char_type& c1, const char_type& c2)noexcept{
            c1 = c2;
        }
        static constexpr bool eq(char_type c1, char_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr bool lt(char_type c1, char_type c2)noexcept{
            return c1 < c2;
        }

        static constexpr int compare(const char_type* s1, const char_type* s2, size_t n){
            if(n == 0)
                return 0;
            for(; n; --n, ++s1, ++s2){
                if(lt(*s1, *s2))
                    return -1;
                if(lt(*s2, *s1))
                    return 1;
            }
            return 0;
        }
        static constexpr size_t length(const char_type* s){
            size_t len = 0;
            for(; !eq(*s, char_type(0)); ++s)
                ++len;
            return len;
        }
        static constexpr const char_type* find(const char_type* s, size_t n,
                                               const char_type& a){
            if(n == 0)
                return nullptr;
            for(; n; --n){
                if (eq(*s, a))
                    return s;
                ++s;
            }
            return 0;
        }
        static char_type* move(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            if(s1 < s2){
                for (; n; --n, ++s1, ++s2)
                    assign(*s1, *s2);
            }else if(s2 < s1){
                s1 += n;
                s2 += n;
                for (; n; --n)
                    assign(*--s1, *--s2);
            }
            return r;
        }
        static char_type* copy(char_type* s1, const char_type* s2, size_t n){
            char_type* r = s1;
            for(; n; --n, ++s1, ++s2)
                assign(*s1, *s2);
            return r;
        }
        static char_type* assign(char_type* s, size_t n, char_type a){
            char_type* r = s;
            for(; n; --n, ++s)
                assign(*s, a);
            return r;
        }

        static constexpr int_type not_eof(int_type c)noexcept{
            return eq_int_type(c, eof()) ? ~eof() : c;
        }
        static constexpr char_type to_char_type(int_type c)noexcept{
            return char_type(c);
        }
        static constexpr int_type to_int_type(char_type c)noexcept{
            return int_type(c);
        }
        static constexpr bool eq_int_type(int_type c1, int_type c2)noexcept{
            return c1 == c2;
        }
        static constexpr int_type eof()noexcept{
            return int_type(WEOF);
        }
    };
}

#endif /* ____CHAR_TRAITS__ */
