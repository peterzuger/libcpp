/**
 * @file   __move
 * @author Peter Züger
 * @date   26.10.2019
 * @brief  std::move
 * @note   defined in header <utility>
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ____MOVE__
#define ____MOVE__

#include <type_traits>

namespace std{
    // 23.2.5, forward/move
    template<class T>
    constexpr T&& forward(std::remove_reference_t<T>& t)noexcept{
        return static_cast<T&&>(t);
    }

    template<class T>
    constexpr T&& forward(std::remove_reference_t<T>&& t)noexcept{
        return static_cast<T&&>(t);
    }

    template<class T>
    constexpr std::remove_reference_t<T>&& move(T&& t)noexcept{
        return static_cast<std::remove_reference_t<T>&&>(t);
    }

    template<class T>
    constexpr std::conditional_t<!std::is_nothrow_move_constructible_v<T> &&
                                 std::is_copy_constructible_v<T>, const T&, T&&>
    move_if_noexcept(T& x)noexcept{
        return std::move(x);
    }
}

#endif /* ____MOVE__ */
