/** -*- mode: c++ -*-
 * @file   libcpp/include/tuple
 * @author Peter Züger
 * @date   12.10.2018
 * @brief  std::tuple
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __TUPLE__
#define __TUPLE__

#include <__pair>
#include <__tuple>
#include <__uses_allocator>
#include <cstddef>
#include <memory>
#include <type_traits>

namespace std{
    // 23.5.3, class template tuple
    template<class... Types>
    class tuple{
        static constexpr bool is_default_constructible = std::conjunction_v<std::is_default_constructible<Types>...>;
        static constexpr bool is_implicitly_default_constructible = std::conjunction_v<impl::__is_implicitly_default_constructible<Types>...>;
        static constexpr bool is_copy_constructible = std::conjunction_v<std::is_copy_constructible<Types>...>;
        static constexpr bool is_nothrow_move_assignable = std::conjunction_v<std::is_nothrow_move_assignable<Types>...>;
        static constexpr bool is_nothrow_swappable = std::conjunction_v<std::is_nothrow_swappable<Types>...>;

    public:
        // 23.5.3.1, tuple construction
        tuple(const tuple&) = default;
        tuple(tuple&&) = default;

        template<class = std::enable_if_t<is_default_constructible>,
                 std::enable_if_t<is_implicitly_default_constructible, bool> = false>
        constexpr tuple();

        template<class = std::enable_if_t<is_default_constructible>,
                 std::enable_if_t<!is_implicitly_default_constructible, bool> = false>
        explicit constexpr tuple();


        template<class = std::enable_if_t<(sizeof...(Types) >= 1) && is_copy_constructible>,
            std::enable_if_t<std::conjunction_v<std::is_convertible<const Types&, Types>...>, bool> = false>
        constexpr tuple(const Types&...);

        template<class = std::enable_if_t<(sizeof...(Types) >= 1) && is_copy_constructible>,
            std::enable_if_t<!std::conjunction_v<std::is_convertible<const Types&, Types>...>, bool> = false>
        explicit constexpr tuple(const Types&...);


        template<class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) &&
                                          (sizeof...(Types) >= 1) &&
                 (std::conjunction_v<std::is_constructible<Types, UTypes&&>...>)>,
            std::enable_if_t<std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...> ,bool> = false>
        constexpr tuple(UTypes&&...);

        template<class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) &&
                                          (sizeof...(Types) >= 1) &&
                 (std::conjunction_v<std::is_constructible<Types, UTypes&&>...>)>,
            std::enable_if_t<!std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...> ,bool> = false>
        explicit constexpr tuple(UTypes&&...);


        template<class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<std::is_constructible_v<Types, const UTypes&>...>)>,
                 std::enable_if_t<std::conjunction_v<std::is_convertible_v<const UTypes&, Types>...> ,bool> = false>
        constexpr tuple(const tuple<UTypes...>&);

        template<class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<std::is_constructible_v<Types, const UTypes&>...>)>,
                 std::enable_if_t<!std::conjunction_v<std::is_convertible_v<const UTypes&, Types>...> ,bool> = false>
        explicit constexpr tuple(const tuple<UTypes...>&);


        template<class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<is_constructible_v<Types, UTypes&&>...>)>,
                 std::enable_if_t<std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...>, bool> = false>
        constexpr tuple(tuple<UTypes...>&&);

        template<class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<is_constructible_v<Types, UTypes&&>...>)>,
                 std::enable_if_t<!std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...>, bool> = false>
        explicit constexpr tuple(tuple<UTypes...>&&);


        // template<class U1, class U2>
        // EXPLICIT constexpr tuple(const pair<U1, U2>&); // only if sizeof...(Types) == 2

        // template<class U1, class U2>
        // EXPLICIT constexpr tuple(pair<U1, U2>&&); // only if sizeof...(Types) == 2


        // allocator-extended constructors
        template<class Alloc>
        tuple(allocator_arg_t, const Alloc& a);


        template<class Alloc,
                 class = std::enable_if_t<(sizeof...(Types) >= 1) && is_copy_constructible>,
            std::enable_if_t<std::conjunction_v<std::is_convertible<const Types&, Types>...>, bool> = false>
        tuple(allocator_arg_t, const Alloc& a, const Types&...);

        template<class Alloc,
                 class = std::enable_if_t<(sizeof...(Types) >= 1) && is_copy_constructible>,
            std::enable_if_t<!std::conjunction_v<std::is_convertible<const Types&, Types>...>, bool> = false>
        explicit tuple(allocator_arg_t, const Alloc& a, const Types&...);



        template<class Alloc, class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) &&
                                          (sizeof...(Types) >= 1) &&
                 (std::conjunction_v<std::is_constructible<Types, UTypes&&>...>)>,
            std::enable_if_t<std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...> ,bool> = false>
        tuple(allocator_arg_t, const Alloc& a, UTypes&&...);

        template<class Alloc, class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) &&
                                          (sizeof...(Types) >= 1) &&
                 (std::conjunction_v<std::is_constructible<Types, UTypes&&>...>)>,
            std::enable_if_t<!std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...> ,bool> = false>
        tuple(allocator_arg_t, const Alloc& a, UTypes&&...);


        template<class Alloc>
        tuple(allocator_arg_t, const Alloc& a, const tuple&);

        template<class Alloc>
        tuple(allocator_arg_t, const Alloc& a, tuple&&);


        template<class Alloc, class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<std::is_constructible_v<Types, const UTypes&>...>)>,
                 std::enable_if_t<std::conjunction_v<std::is_convertible_v<const UTypes&, Types>...> ,bool> = false>
        tuple(allocator_arg_t, const Alloc& a, const tuple<UTypes...>&);

        template<class Alloc, class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<std::is_constructible_v<Types, const UTypes&>...>)>,
                 std::enable_if_t<!std::conjunction_v<std::is_convertible_v<const UTypes&, Types>...> ,bool> = false>
        explicit tuple(allocator_arg_t, const Alloc& a, const tuple<UTypes...>&);


        template<class Alloc, class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<is_constructible_v<Types, UTypes&&>...>)>,
                 std::enable_if_t<std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...>, bool> = false>
        tuple(allocator_arg_t, const Alloc& a, tuple<UTypes...>&&);

        template<class Alloc, class... UTypes,
                 class = std::enable_if_t<(sizeof...(Types) == sizeof...(UTypes)) && (sizeof...(Types) != 1) &&
                                          (std::conjunction_v<is_constructible_v<Types, UTypes&&>...>)>,
                 std::enable_if_t<!std::conjunction_v<std::is_convertible_v<UTypes&&, Types>...>, bool> = false>
        explicit tuple(allocator_arg_t, const Alloc& a, tuple<UTypes...>&&);


        // template<class Alloc, class U1, class U2>
        // EXPLICIT tuple(allocator_arg_t, const Alloc& a, const pair<U1, U2>&);


        // template<class Alloc, class U1, class U2>
        // EXPLICIT tuple(allocator_arg_t, const Alloc& a, pair<U1, U2>&&);


        // 23.5.3.2,tuple assignment
        tuple& operator=(const tuple&);
        tuple& operator=(tuple&&)noexcept(is_nothrow_move_assignable);

        template<class... UTypes>
        tuple& operator=(const tuple<UTypes...>&);

        template<class... UTypes>
        tuple& operator=(tuple<UTypes...>&&);

        template<class U1, class U2>
        tuple& operator=(const pair<U1, U2>&); // only if sizeof...(Types) == 2

        template<class U1, class U2>
        tuple& operator=(pair<U1, U2>&&); // only if sizeof...(Types) == 2

        // 23.5.3.3, tuple swap
        void swap(tuple&)noexcept(is_nothrow_swappable);
    };

    template<class... UTypes>
    tuple(UTypes...) -> tuple<UTypes...>;

    template<class T1, class T2>
    tuple(pair<T1, T2>) -> tuple<T1, T2>;

    template<class Alloc, class... UTypes>
    tuple(allocator_arg_t, Alloc, UTypes...) -> tuple<UTypes...>;

    template<class Alloc, class T1, class T2>
    tuple(allocator_arg_t, Alloc, pair<T1, T2>) -> tuple<T1, T2>;

    template<class Alloc, class... UTypes>
    tuple(allocator_arg_t, Alloc, tuple<UTypes...>) -> tuple<UTypes...>;

    // 23.5.3.4, tuple creation functions
    //inline constexpr unspecified ignore;
    template<class... TTypes>
    constexpr tuple<TTypes...> make_tuple(TTypes&&...);

    template<class... TTypes>
    constexpr tuple<TTypes&&...> forward_as_tuple(TTypes&&...)noexcept;

    template<class... TTypes>
    constexpr tuple<TTypes&...> tie(TTypes&...)noexcept;

    template<class... Tuples>
    constexpr tuple<Tuples...> tuple_cat(Tuples&&...);

    // 23.5.3.5, calling a function with a tuple of arguments
    template<class F, class Tuple>
    constexpr decltype(auto) apply(F&& f, Tuple&& t);

    template<class T, class Tuple>
    constexpr T make_from_tuple(Tuple&& t);

    // 23.5.3.7, element access
    template<std::size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>& get(tuple<Types...>&)noexcept;

    template<std::size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&& get(tuple<Types...>&&)noexcept;

    template<std::size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>& get(const tuple<Types...>&)noexcept;

    template<std::size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>&& get(const tuple<Types...>&&)noexcept;

    template<class T, class... Types>
    constexpr T& get(tuple<Types...>& t)noexcept;

    template<class T, class... Types>
    constexpr T&& get(tuple<Types...>&& t)noexcept;

    template<class T, class... Types>
    constexpr const T& get(const tuple<Types...>& t)noexcept;

    template<class T, class... Types>
    constexpr const T&& get(const tuple<Types...>&& t)noexcept;

    // 23.5.3.8, relational operators
    template<class... TTypes, class... UTypes>
    constexpr bool operator==(const tuple<TTypes...>&, const tuple<UTypes...>&);

    template<class... TTypes, class... UTypes>
    constexpr bool operator<(const tuple<TTypes...>&, const tuple<UTypes...>&);

    template<class... TTypes, class... UTypes>
    constexpr bool operator!=(const tuple<TTypes...>&, const tuple<UTypes...>&);

    template<class... TTypes, class... UTypes>
    constexpr bool operator>(const tuple<TTypes...>&, const tuple<UTypes...>&);

    template<class... TTypes, class... UTypes>
    constexpr bool operator<=(const tuple<TTypes...>&, const tuple<UTypes...>&);

    template<class... TTypes, class... UTypes>
    constexpr bool operator>=(const tuple<TTypes...>&, const tuple<UTypes...>&);

    // 23.5.3.9, allocator-related traits
    template<class... Types, class Alloc>
    struct uses_allocator<tuple<Types...>, Alloc>:
        public std::true_type{};

    // 23.5.3.10, specialized algorithms
    template<class... Types>
    void swap(tuple<Types...>& x, tuple<Types...>& y)noexcept;
}

#endif /* __TUPLE__ */
