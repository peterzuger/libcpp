/** -*- mode: c++ -*-
 * @file   libcpp/include/__comparisons
 * @author Peter Züger
 * @date   26.10.2019
 * @brief  comparisons
 * @note   defined in header <functional>
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ____COMPARISONS__
#define ____COMPARISONS__

#include <__move>

namespace std{
    // 23.14.7, comparisons
    template<class T = void>
    struct equal_to{
        constexpr bool operator()(const T& x, const T& y)const{
            return x == y;
        }
    };

    template<class T = void>
    struct not_equal_to{
        constexpr bool operator()(const T& x, const T& y)const{
            return x != y;
        }
    };

    template<class T = void>
    struct greater{
        constexpr bool operator()(const T& x, const T& y)const{
            return x > y;
        }
    };

    template<class T = void>
    struct less{
        constexpr bool operator()(const T& x, const T& y)const{
            return x < y;
        }
    };

    template<class T = void>
    struct greater_equal{
        constexpr bool operator()(const T& x, const T& y)const{
            return x >= y;
        }
    };

    template<class T = void>
    struct less_equal{
        constexpr bool operator()(const T& x, const T& y)const{
            return x <= y;
        }
    };

    template<>
    struct equal_to<void>{
        template<class T, class U>
        constexpr auto operator()(T&& t, U&& u)const
            -> decltype(std::forward<T>(t) == std::forward<U>(u)){
            return std::forward<T>(t) == std::forward<U>(u);
        }

        using is_transparent = void;
    };

    template<>
    struct not_equal_to<void>{
        template<class T, class U>
        constexpr auto operator()(T&& t, U&& u)const
            -> decltype(std::forward<T>(t) != std::forward<U>(u)){
            return std::forward<T>(t) != std::forward<U>(u);
        }

        using is_transparent = void;
    };

    template<>
    struct greater<void>{
        template<class T, class U>
        constexpr auto operator()(T&& t, U&& u)const
            -> decltype(std::forward<T>(t) > std::forward<U>(u)){
            return std::forward<T>(t) > std::forward<U>(u);
        }

        using is_transparent = void;
    };

    template<>
    struct less<void>{
        template<class T, class U>
        constexpr auto operator()(T&& t, U&& u)const
            -> decltype(std::forward<T>(t) < std::forward<U>(u)){
            return std::forward<T>(t) < std::forward<U>(u);
        }

        using is_transparent = void;
    };

    template<>
    struct greater_equal<void>{
        template<class T, class U>
        constexpr auto operator()(T&& t, U&& u)const
            -> decltype(std::forward<T>(t) >= std::forward<U>(u)){
            return std::forward<T>(t) >= std::forward<U>(u);
        }

        using is_transparent = void;
    };

    template<>
    struct less_equal<void>{
        template<class T, class U>
        constexpr auto operator()(T&& t, U&& u)const
            -> decltype(std::forward<T>(t) <= std::forward<U>(u)){
            return std::forward<T>(t) <= std::forward<U>(u);
        }

        using is_transparent = void;
    };
}

#endif /* ____COMPARISONS__ */
