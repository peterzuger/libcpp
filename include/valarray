/** -*- mode: c++ -*-
 * @file   libcpp/include/valarray
 * @author Peter Züger
 * @date   14.05.2019
 * @brief  Numeric arrays
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __VALARRAY__
#define __VALARRAY__

#include <__minmax>
#include <__swap>
#include <cmath>
#include <initializer_list>
#include <new>
#include <numeric>

namespace std{
    // forward declarations
    template<class T>class slice_array;
    class gslice;
    template<class T>class gslice_array;
    template<class T>class mask_array;
    template<class T>class indirect_array;

    class slice{
        std::size_t _start;
        std::size_t _size;
        std::size_t _stride;

    public:
        slice() = default;

        slice(size_t st, size_t sz, size_t sr):
            _start{st},
            _size{sz},
            _stride{sr}{}

        size_t start()const{
            return _start;
        }
        size_t size()const{
            return _size;
        }
        size_t stride()const{
            return _stride;
        }
    };

    // An array of type T
    template<class T>
    class valarray{
    public:
        using value_type = T;

        // 29.7.2.2, construct/destroy
        valarray():
            _begin{0}, _end{0}{}

        explicit valarray(size_t n){
            __construct(n);
        }

        valarray(const T& v, size_t n){
            __construct(n, v);
        }

        valarray(const T* v, size_t n){
            __allocate(n);

            for(size_t i = 0; i < n; i++)
                _begin[i] = v[i];
        }

        valarray(const valarray& v){
            __construct(v.size());

            for(size_t i = 0; i < v.size(); i++)
                _begin[i] = v._begin[i];
        }

        valarray(valarray&& v)noexcept:
            _begin{v._begin},
            _end{v._end}{
                v._begin = v._end = 0;
            }

        valarray(const slice_array<T>& v);

        valarray(const gslice_array<T>& v);

        valarray(const mask_array<T>& v);

        valarray(const indirect_array<T>& v);

        valarray(initializer_list<T> v);

        ~valarray(){
            __destroy(size());
        }

        // 29.7.2.3, assignment
        valarray& operator=(const valarray&);
        valarray& operator=(valarray&& other)noexcept{
            __destroy(size());
            swap(other);
        }
        valarray& operator=(initializer_list<T>);
        valarray& operator=(const T&);
        valarray& operator=(const slice_array<T>&);
        valarray& operator=(const gslice_array<T>&);
        valarray& operator=(const mask_array<T>&);
        valarray& operator=(const indirect_array<T>&);

        // 29.7.2.4, element access
        const T& operator[](size_t n)const{
            return _begin[n];
        }
        T& operator[](size_t n){
            return _begin[n];
        }

        // 29.7.2.5, subset operations
        valarray operator[](slice)const;
        slice_array<T> operator[](slice);
        valarray operator[](const gslice&)const;
        gslice_array<T> operator[](const gslice&);
        valarray operator[](const valarray<bool>&)const;
        mask_array<T> operator[](const valarray<bool>&);
        valarray operator[](const valarray<size_t>&)const;
        indirect_array<T> operator[](const valarray<size_t>&);

        // 29.7.2.6, unary operators
        valarray operator+()const;
        valarray operator-()const;
        valarray operator~()const;
        valarray<bool> operator!()const;

        // 29.7.2.7, compound assignment
        valarray& operator*=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp *= v;
            return *this;
        }
        valarray& operator/=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp /= v;
            return *this;
        }
        valarray& operator%=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp %= v;
            return *this;
        }
        valarray& operator+=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp += v;
            return *this;
        }
        valarray& operator-=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp -= v;
            return *this;
        }
        valarray& operator^=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp ^= v;
            return *this;
        }
        valarray& operator&=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp &= v;
            return *this;
        }
        valarray& operator|=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp |= v;
            return *this;
        }
        valarray& operator<<=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp <<= v;
            return *this;
        }
        valarray& operator>>=(const T& v){
            for(value_type* tmp = _begin; tmp != _end; ++tmp)
                *tmp >>= v;
            return *this;
        }

        valarray& operator*=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] *= v._begin[i];
            return *this;
        }
        valarray& operator/=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] /= v._begin[i];
            return *this;
        }
        valarray& operator%=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] %= v._begin[i];
            return *this;
        }
        valarray& operator+=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] += v._begin[i];
            return *this;
        }
        valarray& operator-=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] -= v._begin[i];
            return *this;
        }
        valarray& operator^=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] ^= v._begin[i];
            return *this;
        }
        valarray& operator|=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] |= v._begin[i];
            return *this;
        }
        valarray& operator&=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] &= v._begin[i];
            return *this;
        }
        valarray& operator<<=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] <<= v._begin[i];
            return *this;
        }
        valarray& operator>>=(const valarray& v){
            for(size_t i = 0; i < size(); ++i)
                _begin[i] >>= v._begin[i];
            return *this;
        }

        // 29.7.2.8, member functions
        void swap(valarray& other)noexcept{
            using std::swap;
            swap(_begin, other._begin);
            swap(_end, other._end);
        }

        size_t size()const{
            return _end - _begin;
        }

        T sum()const{
            return std::accumulate(_begin, _end);
        }
        T min()const{
            return *std::min_element(_begin, _end);
        }
        T max()const{
            return *std::max_element(_begin, _end);
        }

        valarray shift(int)const;
        valarray cshift(int)const;

        valarray apply(T func(T))const{
            valarray<value_type> ret(size());
            for(size_t i = 0; i < size(); i++)
                ret._begin[i] = func(_begin[i]);
            return ret;
        }

        valarray apply(T func(const T&))const{
            valarray<value_type> ret(size());
            for(size_t i = 0; i < size(); i++)
                ret._begin[i] = func(_begin[i]);
            return ret;
        }

        void resize(size_t sz, T c = T()){
            __destroy(size());
            __construct(sz, c);
        }

        value_type* __begin()noexcept{
            return _begin;
        }
        const value_type* __begin()const noexcept{
            return _begin;
        }
        value_type* __end()noexcept{
            return _end;
        }
        const value_type* __end()const noexcept{
            return _end;
        }

    private:
        void __allocate(size_t n){
            _begin = _end = ::operator new(n * sizeof(value_type));
            _end += n;
        }

        void __deallocate(){
            ::operator delete(_begin);
            _begin = _end = 0;
        }

        void __construct(size_t n){
            __allocate(n);
            for(size_t i = 0; i < n; i++){
#if defined(__cpp_exceptions)
                try{
#endif /* defined(__cpp_exceptions) */
                    ::new(&_begin[i]) value_type{};
#if defined(__cpp_exceptions)
                }catch(...){
                    __destroy(i);
                    throw;
                }
#endif /* defined(__cpp_exceptions) */
            }
        }

        void __construct(size_t n, const value_type& val){
            __allocate(n);
            for(size_t i = 0; i < n; i++){
#if defined(__cpp_exceptions)
                try{
#endif /* defined(__cpp_exceptions) */
                    ::new(&_begin[i]) value_type{val};
#if defined(__cpp_exceptions)
                }catch(...){
                    __destroy(i);
                    throw;
                }
#endif /* defined(__cpp_exceptions) */
            }
        }

        void __destroy(size_t n){
            for(size_t i = 0; i < n; i++)
                ::delete(&_begin[i]);
            __deallocate();
        }

        value_type* _begin;
        value_type* _end;
    };

    template<class T, size_t cnt>
    valarray(const T(&)[cnt], size_t)
        -> valarray<T>;

    // a BLAS-like slice out of an array
    template<class T>
    class slice_array{
        T* _data;
        std::size_t _size;
        std::size_t _stride;

        slice_array(const slice& slice, const valarray<T>& val):
            _data{const_cast<T*>(val.__begin( + slice.start()))},
            _size{slice.size()},
            _stride{slice.stride()}{}

    public:
        using value_type = T;

        void operator=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] = x[j];
        }
        void operator*=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] *= x[j];
        }
        void operator/=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] /= x[j];
        }
        void operator%=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] %= x[j];
        }
        void operator+=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] += x[j];
        }
        void operator-=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] -= x[j];
        }
        void operator^=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] ^= x[j];
        }
        void operator&=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] &= x[j];
        }
        void operator|=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] |= x[j];
        }
        void operator<<=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] <<= x[j];
        }
        void operator>>=(const valarray<T>& x)const{
            for(size_t i = 0, j = 0; i < _size; i += _stride, j++)
                _data[i] >>= x[j];
        }

        slice_array(const slice_array&) = default;

        const slice_array& operator=(const slice_array& other)const{
            _data = other._data;
            _size = other._size;
            _stride = other._stride;
        }

        void operator=(const T& x)const{
            for(size_t i = 0; i < _size; i += _stride)
                _data[i] = x;
        }

        slice_array() = delete;// as implied by declaring copy constructor above
    };

    // a generalized slice out of an array
    class gslice{
    public:
        gslice();
        gslice(size_t s, const valarray<size_t>& l, const valarray<size_t>& d);

        size_t start()const;
        valarray<size_t> size()const;
        valarray<size_t> stride()const;
    };

    template<class T>
    class gslice_array{
    public:
        using value_type = T;

        void operator=(const valarray<T>&)const;
        void operator*=(const valarray<T>&)const;
        void operator/=(const valarray<T>&)const;
        void operator%=(const valarray<T>&)const;
        void operator+=(const valarray<T>&)const;
        void operator-=(const valarray<T>&)const;
        void operator^=(const valarray<T>&)const;
        void operator&=(const valarray<T>&)const;
        void operator|=(const valarray<T>&)const;
        void operator<<=(const valarray<T>&)const;
        void operator>>=(const valarray<T>&)const;

        gslice_array(const gslice_array&);

        ~gslice_array();

        const gslice_array& operator=(const gslice_array&)const;
        void operator=(const T&)const;

        gslice_array() = delete;// as implied by declaring copy constructor above
    };

    // a masked array
    template<class T>
    class mask_array{
    public:
        using value_type = T;

        void operator=(const valarray<T>&)const;
        void operator*=(const valarray<T>&)const;
        void operator/=(const valarray<T>&)const;
        void operator%=(const valarray<T>&)const;
        void operator+=(const valarray<T>&)const;
        void operator-=(const valarray<T>&)const;
        void operator^=(const valarray<T>&)const;
        void operator&=(const valarray<T>&)const;
        void operator|=(const valarray<T>&)const;
        void operator<<=(const valarray<T>&)const;
        void operator>>=(const valarray<T>&)const;

        mask_array(const mask_array&);

        ~mask_array();

        const mask_array& operator=(const mask_array&)const;
        void operator=(const T&)const;

        mask_array() = delete;// as implied by declaring copy constructor above
    };

    // an indirected array
    template<class T>
    class indirect_array{
    public:
        using value_type = T;

        void operator=(const valarray<T>&)const;
        void operator*=(const valarray<T>&)const;
        void operator/=(const valarray<T>&)const;
        void operator%=(const valarray<T>&)const;
        void operator+=(const valarray<T>&)const;
        void operator-=(const valarray<T>&)const;
        void operator^=(const valarray<T>&)const;
        void operator&=(const valarray<T>&)const;
        void operator|=(const valarray<T>&)const;
        void operator<<=(const valarray<T>&)const;
        void operator>>=(const valarray<T>&)const;

        indirect_array(const indirect_array&);

        ~indirect_array();

        const indirect_array& operator=(const indirect_array&)const;
        void operator=(const T&)const;

        indirect_array() = delete;// as implied by declaring copy constructor above
    };

    template<class T>
    void swap(valarray<T>& x, valarray<T>& y)noexcept{
        x.swap(y);
    }

    template<class T>valarray<T> operator*(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] * y[i];
        return tmp;
    }
    template<class T>valarray<T> operator*(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] * y;
        return tmp;
    }
    template<class T>valarray<T> operator*(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x * y[i];
        return tmp;
    }

    template<class T>valarray<T> operator/(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] / y[i];
        return tmp;
    }
    template<class T>valarray<T> operator/(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] / y;
        return tmp;
    }
    template<class T>valarray<T> operator/(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x / y[i];
        return tmp;
    }

    template<class T>valarray<T> operator%(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] % y[i];
        return tmp;
    }
    template<class T>valarray<T> operator%(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] % y;
        return tmp;
    }
    template<class T>valarray<T> operator%(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x % y[i];
        return tmp;
    }

    template<class T>valarray<T> operator+(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] + y[i];
        return tmp;
    }
    template<class T>valarray<T> operator+(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] + y;
        return tmp;
    }
    template<class T>valarray<T> operator+(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x + y[i];
        return tmp;
    }

    template<class T>valarray<T> operator-(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] - y[i];
        return tmp;
    }
    template<class T>valarray<T> operator-(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] - y;
        return tmp;
    }
    template<class T>valarray<T> operator-(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x - y[i];
        return tmp;
    }

    template<class T>valarray<T> operator^(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] ^ y[i];
        return tmp;
    }
    template<class T>valarray<T> operator^(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] ^ y;
        return tmp;
    }
    template<class T>valarray<T> operator^(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x ^ y[i];
        return tmp;
    }

    template<class T>valarray<T> operator&(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] & y[i];
        return tmp;
    }
    template<class T>valarray<T> operator&(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] & y;
        return tmp;
    }
    template<class T>valarray<T> operator&(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x & y[i];
        return tmp;
    }

    template<class T>valarray<T> operator|(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] | y[i];
        return tmp;
    }
    template<class T>valarray<T> operator|(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] | y;
        return tmp;
    }
    template<class T>valarray<T> operator|(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x | y[i];
        return tmp;
    }

    template<class T>valarray<T> operator<<(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] << y[i];
        return tmp;
    }
    template<class T>valarray<T> operator<<(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] << y;
        return tmp;
    }
    template<class T>valarray<T> operator<<(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x << y[i];
        return tmp;
    }

    template<class T>valarray<T> operator>>(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] >> y[i];
        return tmp;
    }
    template<class T>valarray<T> operator>>(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] >> y;
        return tmp;
    }
    template<class T>valarray<T> operator>>(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x >> y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator&&(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] && y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator&&(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] && y;
        return tmp;
    }
    template<class T>valarray<bool> operator&&(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x && y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator||(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] || y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator||(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] || y;
        return tmp;
    }
    template<class T>valarray<bool> operator||(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x || y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator==(const valarray<T>& x, const valarray<T>& y){
        valarray<bool> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] == y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator==(const valarray<T>& x, const T& y){
        valarray<bool> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] == y;
        return tmp;
    }
    template<class T>valarray<bool> operator==(const T& x, const valarray<T>& y){
        valarray<bool> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x == y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator!=(const valarray<T>& x, const valarray<T>& y){
        valarray<bool> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] != y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator!=(const valarray<T>& x, const T& y){
        valarray<bool> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] != y;
        return tmp;
    }
    template<class T>valarray<bool> operator!=(const T& x, const valarray<T>& y){
        valarray<bool> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x != y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator<(const valarray<T>& x, const valarray<T>& y){
        valarray<bool> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] < y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator<(const valarray<T>& x, const T& y){
        valarray<bool> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] < y;
        return tmp;
    }
    template<class T>valarray<bool> operator<(const T& x, const valarray<T>& y){
        valarray<bool> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x < y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator>(const valarray<T>& x, const valarray<T>& y){
        valarray<bool> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] > y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator>(const valarray<T>& x, const T& y){
        valarray<bool> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] > y;
        return tmp;
    }
    template<class T>valarray<bool> operator>(const T& x, const valarray<T>& y){
        valarray<bool> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x > y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator<=(const valarray<T>& x, const valarray<T>& y){
        valarray<bool> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] <= y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator<=(const valarray<T>& x, const T& y){
        valarray<bool> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] <= y;
        return tmp;
    }
    template<class T>valarray<bool> operator<=(const T& x, const valarray<T>& y){
        valarray<bool> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x <= y[i];
        return tmp;
    }

    template<class T>valarray<bool> operator>=(const valarray<T>& x, const valarray<T>& y){
        valarray<bool> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = x[i] >= y[i];
        return tmp;
    }
    template<class T>valarray<bool> operator>=(const valarray<T>& x, const T& y){
        valarray<bool> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = x[i] >= y;
        return tmp;
    }
    template<class T>valarray<bool> operator>=(const T& x, const valarray<T>& y){
        valarray<bool> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = x >= y[i];
        return tmp;
    }

    template<class T>valarray<T> abs(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::abs(x[i]);
        return tmp;
    }

    template<class T>valarray<T> acos(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::acos(x[i]);
        return tmp;
    }
    template<class T>valarray<T> asin(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::asin(x[i]);
        return tmp;
    }
    template<class T>valarray<T> atan(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::atan(x[i]);
        return tmp;
    }

    template<class T>valarray<T> atan2(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = std::atan2(x[i], y[i]);
        return tmp;
    }
    template<class T>valarray<T> atan2(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::atan2(x[i], y);
        return tmp;
    }
    template<class T>valarray<T> atan2(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = std::atan2(x, y[i]);
        return tmp;
    }

    template<class T>valarray<T> cos(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::cos(x[i]);
        return tmp;
    }
    template<class T>valarray<T> cosh(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::cosh(x[i]);
        return tmp;
    }
    template<class T>valarray<T> exp(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::exp(x[i]);
        return tmp;
    }
    template<class T>valarray<T> log(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::log(x[i]);
        return tmp;
    }
    template<class T>valarray<T> log10(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::log10(x[i]);
        return tmp;
    }

    template<class T>valarray<T> pow(const valarray<T>& x, const valarray<T>& y){
        valarray<T> tmp(std::min(x.size(), y.size()));
        for(std::size_t i = 0; i < tmp.size(); ++i)
            tmp[i] = std::pow(x[i], y[i]);
        return tmp;
    }
    template<class T>valarray<T> pow(const valarray<T>& x, const T& y){
        valarray<T> tmp(x.size());
        for(std::size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::pow(x[i], y);
        return tmp;
    }
    template<class T>valarray<T> pow(const T& x, const valarray<T>& y){
        valarray<T> tmp(y.size());
        for(std::size_t i = 0; i < y.size(); ++i)
            tmp[i] = std::pow(x, y[i]);
        return tmp;
    }

    template<class T>valarray<T> sin(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::sin(x[i]);
        return tmp;
    }
    template<class T>valarray<T> sinh(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::sinh(x[i]);
        return tmp;
    }
    template<class T>valarray<T> sqrt(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::sqrt(x[i]);
        return tmp;
    }
    template<class T>valarray<T> tan(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::tan(x[i]);
        return tmp;
    }
    template<class T>valarray<T> tanh(const valarray<T>& x){
        valarray<T> tmp(x.size());
        for(size_t i = 0; i < x.size(); ++i)
            tmp[i] = std::tanh(x[i]);
        return tmp;
    }

    template<class T>T* begin(valarray<T>& v){
        return v.__begin();
    }
    template<class T>T* begin(const valarray<T>& v){
        return v.__begin();
    }
    template<class T>T* end(valarray<T>& v){
        return v.__end();
    }
    template<class T>T* end(const valarray<T>& v){
        return v.__end();
    }
}

#endif /* __VALARRAY__ */
