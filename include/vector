/** -*- mode: c++ -*-
 * @file   libcpp/include/vector
 * @author Peter Züger
 * @date   12.08.2018
 * @brief  Sequence containers
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __VECTOR__
#define __VECTOR__

#include <__allocator_traits>
#include <limits>
#include <initializer_list>
#include <iterator>
#include <memory>
#include <memory_resource>

namespace std{
    // 26.3.11, class templatevector
    template<class T, class Allocator = std::allocator<T>>
    class vector{
        // types:
        using value_type             = T;
        using allocator_type         = Allocator;
        using pointer                = typename allocator_traits<Allocator>::pointer;
        using const_pointer          = typename allocator_traits<Allocator>::const_pointer;
        using reference              = value_type&;
        using const_reference        = const value_type&;
        using size_type              = std::size_t;
        using difference_type        = std::ptrdiff_t;
        using iterator               = pointer;
        using const_iterator         = const_pointer;
        using reverse_iterator       = std::reverse_iterator<iterator>;
        using const_reverse_iterator = std::reverse_iterator<const_iterator>;

        // 26.3.11.2, construct/copy/destroy
        vector()noexcept(noexcept(Allocator())): vector(Allocator()){}
        explicit vector(const Allocator&)noexcept;
        explicit vector(size_type n, const Allocator& = Allocator());
        vector(size_type n, const T& value, const Allocator& = Allocator());

        template<class InputIterator>
        vector(InputIterator first, InputIterator last, const Allocator& = Allocator());

        vector(const vector& x);
        vector(vector&&)noexcept;
        vector(const vector&, const Allocator&);
        vector(vector&&, const Allocator&);
        vector(initializer_list<T>, const Allocator& = Allocator());

        ~vector();

        vector& operator=(const vector& x);
        vector& operator=(vector&& x)
            noexcept(allocator_traits<Allocator>::propagate_on_container_move_assignment::value ||
                     allocator_traits<Allocator>::is_always_equal::value);
        vector& operator=(initializer_list<T>);

        template<class InputIterator>
        void assign(InputIterator first, InputIterator last);

        void assign(size_type n, const T& u);
        void assign(initializer_list<T>);

        allocator_type get_allocator()const noexcept;

        // iterators:
        iterator begin()noexcept{
            return iterator(_data);
        }
        const_iterator begin()const noexcept{
            return const_iterator(_data);
        }
        iterator end()noexcept{
            return iterator(_data + _size);
        }
        const_iterator end()const noexcept{
            return const_iterator(_data + _size);
        }

        reverse_iterator rbegin()noexcept{
            return reverse_iterator(_data + _size);
        }
        const_reverse_iterator rbegin()const noexcept{
            return const_reverse_iterator(_data + _size);
        }
        reverse_iterator rend()noexcept{
            return reverse_iterator(_data);
        }
        const_reverse_iterator rend()const noexcept{
            return const_reverse_iterator(_data);
        }

        const_iterator cbegin()const noexcept{
            return begin();
        }
        const_iterator cend()const noexcept{
            return end();
        }
        const_reverse_iterator crbegin()const noexcept{
            return rbegin();
        }
        const_reverse_iterator crend()const noexcept{
            return rend();
        }

        // 26.3.11.3, capacity
        bool empty()const noexcept{
            return size() == 0;
        }
        size_type size()const noexcept{
            return _size;
        }
        size_type max_size()const noexcept{
            return std::numeric_limits<size_type>::max();
        }
        size_type capacity()const noexcept{
            return _cap;
        }
        void resize(size_type sz);
        void resize(size_type sz, const T& c);
        void reserve(size_type n);
        void shrink_to_fit();

        // element access:
        reference operator[](size_type n){
            return _data[n];
        }
        const_reference operator[](size_type n)const{
            return _data[n];
        }
        const_reference at(size_type n)const{
            if(n >= size())
                __throw_out_of_range("vector::at");
            return _data[n];
        }
        reference at(size_type n){
            if(n >= size())
                __throw_out_of_range("vector::at");
            return _data[n];
        }
        reference front(){
            return _data[0];
        }
        const_reference front()const{
            return _data[0];
        }
        reference back(){
            return _data[size() - 1];
        }
        const_reference back()const{
            return _data[size() - 1];
        }

        // 26.3.11.4, data access
        T* data()noexcept{
            return _data;
        }
        const T* data()const noexcept{
            return _data;
        }

        // 26.3.11.5, modifiers
        template<class... Args>
        reference emplace_back(Args&&... args);

        void push_back(const T& x);
        void push_back(T&& x);
        void pop_back();

        template<class... Args>
        iterator emplace(const_iterator position, Args&&... args);
        iterator insert(const_iterator position, const T& x);
        iterator insert(const_iterator position, T&& x);
        iterator insert(const_iterator position, size_type n, const T& x);

        template<class InputIterator>
        iterator insert(const_iterator position, InputIterator first, InputIterator last);
        iterator insert(const_iterator position, initializer_list<T> il);
        iterator erase(const_iterator position);
        iterator erase(const_iterator first, const_iterator last);
        void swap(vector&)
            noexcept(allocator_traits<Allocator>::propagate_on_container_swap::value ||
                     allocator_traits<Allocator>::is_always_equal::value);

        void clear()noexcept;

    private:
        size_type _cap;
        size_type _size;
        pointer   _data;
    };

    template<class InputIterator,
             class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
    vector(InputIterator, InputIterator, Allocator = Allocator())
        -> vector<typename iterator_traits<InputIterator>::value_type, Allocator>;

    template<class T, class Allocator>
    bool operator==(const vector<T, Allocator>& x, const vector<T, Allocator>& y);
    template<class T, class Allocator>
    bool operator< (const vector<T, Allocator>& x, const vector<T, Allocator>& y);
    template<class T, class Allocator>
    bool operator!=(const vector<T, Allocator>& x, const vector<T, Allocator>& y);
    template<class T, class Allocator>
    bool operator> (const vector<T, Allocator>& x, const vector<T, Allocator>& y);
    template<class T, class Allocator>
    bool operator>=(const vector<T, Allocator>& x, const vector<T, Allocator>& y);
    template<class T, class Allocator>
    bool operator<=(const vector<T, Allocator>& x, const vector<T, Allocator>& y);

    template<class T, class Allocator>
    void swap(vector<T, Allocator>& x, vector<T, Allocator>& y)noexcept(noexcept(x.swap(y))){
        x.swap(y);
    }

    // 26.3.12, class vector<bool>
    template<class Allocator>
    class vector<bool, Allocator>;

    // hash support
    template<class T>
    struct hash;

    template<class Allocator>
    struct hash<vector<bool, Allocator>>;

    namespace pmr{
        template<class T>
        using vector = std::vector<T, std::pmr::polymorphic_allocator<T>>;
    }
}

#endif /* __VECTOR__ */
