/**
 * @file   libcpp/include/initializer_list
 * @author Peter Züger
 * @date   31.07.2018
 * @note   part of the freestanding headers
 * @brief  std::initializer_list
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __INITIALIZER_LIST__
#define __INITIALIZER_LIST__

#include <cstddef>

namespace std{
    template<class E>
    class initializer_list{
        const E* _p;
        size_t _size;

        constexpr initializer_list(const E* p, size_t s)noexcept:_p(p),_size(s)
            {}

    public:
        using value_type      = E;
        using reference       = const E&;
        using const_reference = const E&;
        using size_type       = size_t;
        using iterator        = const E*;
        using const_iterator  = const E*;

        constexpr initializer_list()noexcept:_p(nullptr),_size(0)
            {}

        // number of elements
        constexpr size_t size()const noexcept{
            return _size;
        }

        // first element
        constexpr const E* begin()const noexcept{
            return _p;
        }

        // one past the last element
        constexpr const E* end()const noexcept{
            return _p + _size;
        }
    };


    // 21.9.4, initializer list range access
    template<class E>
    inline constexpr const E* begin(initializer_list<E> il)noexcept{
        return il.begin();
    }

    template<class E>
    inline constexpr const E* end(initializer_list<E> il)noexcept{
        return il.end();
    }
}

#endif /* __INITIALIZER_LIST__ */
