/** -*- mode: c++ -*-
 * @file   libcpp/include/functional
 * @author Peter Züger
 * @date   14.05.2019
 * @brief  Function objects
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __FUNCTIONAL__
#define __FUNCTIONAL__

#include <__addressof>
#include <__declval>
#include <__functional>
#include <__iterator_traits>
#include <__move>
#include <__reference_wrapper>
#include <type_traits>
#include <exception>

namespace std{
    // 23.14.4, invoke
    template<class F, class... Args>
    invoke_result_t<F, Args...> invoke(F&& f, Args&&... args)noexcept(std::is_nothrow_invocable_v<F, Args...>);

    template<class F>
    class __call_wrapper{
        using FD = std::decay_t<F>;
        FD fd;

        explicit __call_wrapper(F&& f):
            fd{std::forward<F>(f)}{}

    public:
        __call_wrapper(__call_wrapper &&) = default;
        __call_wrapper(const __call_wrapper &) = default;

        template<class... Args>
        auto operator()(Args&&... args) &
            -> decltype(!declval<invoke_result_t<FD&, Args...>>()){
            return !invoke(fd, std::forward<Args>(args)...);
        }

        template<class... Args>
        auto operator()(Args&&... args)const&
            -> decltype(!declval<invoke_result_t<const FD&, Args...>>()){
            return !invoke(fd, std::forward<Args>(args)...);
        }

        template<class... Args>
        auto operator()(Args&&... args) &&
            -> decltype(!declval<invoke_result_t<FD, Args...>>()){
            return !invoke(std::move(fd), std::forward<Args>(args)...);
        }

        template<class... Args>
        auto operator()(Args&&... args)const&&
            -> decltype(!declval<invoke_result_t<const FD, Args...>>()){
            return !invoke(std::move(fd), std::forward<Args>(args)...);
        }
    };

    // 23.14.10, function template not_fn
    template<class F>
    auto not_fn(F&& f){
        return __call_wrapper<F>(std::forward<F>(f));
    }

    // 23.14.11, bind
    template<class T>
    struct is_bind_expression;

    template<class T>
    struct is_placeholder: std::false_type{};

    template<class F, class... BoundArgs>
    void bind(F&&, BoundArgs&&...);
    template<class R, class F, class... BoundArgs>
    void bind(F&&, BoundArgs&&...);

    namespace placeholders{
        template<int N>
        struct __placeholder{};

        inline constexpr __placeholder<1> _1{};
        inline constexpr __placeholder<2> _2{};
        inline constexpr __placeholder<3> _3{};
        inline constexpr __placeholder<4> _4{};
        inline constexpr __placeholder<5> _5{};
        inline constexpr __placeholder<6> _6{};
        inline constexpr __placeholder<7> _7{};
        inline constexpr __placeholder<8> _8{};
        inline constexpr __placeholder<9> _9{};
        inline constexpr __placeholder<10> _10{};
    }

    template<int N>
    struct is_placeholder<placeholders::__placeholder<N>>: public std::true_type{};

    // 23.14.12, member function adaptors
    template<class R, class T>
    R mem_fn(R T::*)noexcept;

    // 23.14.13, polymorphic function wrappers
    class bad_function_call: public std::exception{
    public:
        // 23.14.13.1.1, constructor
        bad_function_call() noexcept;
    };

    template<class>
    class function;// not defined

    template<class R, class... ArgTypes>
    class function<R(ArgTypes...)>;

    template<class R, class... ArgTypes>
    void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&)noexcept;

    template<class R, class... ArgTypes>
    bool operator==(const function<R(ArgTypes...)>&, nullptr_t)noexcept;

    template<class R, class... ArgTypes>
    bool operator==(nullptr_t, const function<R(ArgTypes...)>&)noexcept;

    template<class R, class... ArgTypes>
    bool operator!=(const function<R(ArgTypes...)>&, nullptr_t)noexcept;

    template<class R, class... ArgTypes>
    bool operator!=(nullptr_t, const function<R(ArgTypes...)>&)noexcept;

    // 23.14.15, hash function primary template
    template<class T>
    struct hash; // not defined

    // 23.14.14, searchers
    template<class ForwardIterator, class BinaryPredicate = equal_to<>>
    class default_searcher;

    template<class RandomAccessIterator,
             class Hash = std::hash<typename iterator_traits<RandomAccessIterator>::value_type>,
             class BinaryPredicate = equal_to<>>
    class boyer_moore_searcher;

    template<class RandomAccessIterator,
             class Hash = std::hash<typename iterator_traits<RandomAccessIterator>::value_type>,
             class BinaryPredicate = equal_to<>>
    class boyer_moore_horspool_searcher;

    // 23.14.11, function object binders
    template<class T>
    inline constexpr bool is_bind_expression_v = is_bind_expression<T>::value;

    template<class T>
    inline constexpr int is_placeholder_v = is_placeholder<T>::value;
}

#endif /* __FUNCTIONAL__ */
