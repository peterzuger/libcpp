/**
 * @file   iterator
 * @author Peter Züger
 * @date   31.07.2018
 * @brief  std::iterator
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __ITERATOR__
#define __ITERATOR__

#include <__addressof>
#include <__char_traits>
#include <__iterator_traits>
#include <__move>
#include <cstddef>
#include <initializer_list>
#include <iosfwd>

namespace std{
    // 27.4.3, iterator operations
    namespace impl{
        template<class InputIterator, class Distance>
        inline void advance(InputIterator& i, Distance n, input_iterator_tag){
            for (; n > 0; --n)
                ++i;
        }

        template<class BiDirIterator, class Distance>
        inline void advance(BiDirIterator& i, Distance n, bidirectional_iterator_tag){
            if (n >= 0)
                for (; n > 0; --n)
                    ++i;
            else
                for (; n < 0; ++n)
                    --i;
        }

        template<class RandIterator, class Distance>
        inline void advance(RandIterator& i, Distance n, random_access_iterator_tag){
            i += n;
        }

        template<class InputIterator>
        inline typename iterator_traits<InputIterator>::difference_type
        distance(InputIterator first, InputIterator last, input_iterator_tag){
            typename iterator_traits<InputIterator>::difference_type r(0);
            for (; first != last; ++first)
                ++r;
            return r;
        }

        template<class RandIterator>
        inline typename iterator_traits<RandIterator>::difference_type
        distance(RandIterator first, RandIterator last, random_access_iterator_tag){
            return last - first;
        }
    }

    template<class InputIterator, class Distance>
    constexpr void advance(InputIterator& i, Distance n){
        impl::advance(i, n, typename iterator_traits<InputIterator>::iterator_category());
    }

    template<class InputIterator>
    constexpr typename iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last){
        return impl::distance(first, last, typename iterator_traits<InputIterator>::iterator_category());
    }

    template<class InputIterator>
    constexpr InputIterator next(InputIterator x,
                                 typename iterator_traits<InputIterator>::difference_type n = 1){
        advance(x, n);
        return x;
    }

    template<class BidirectionalIterator>
    constexpr BidirectionalIterator prev(BidirectionalIterator x,
                                         typename iterator_traits<BidirectionalIterator>::difference_type n = 1){
        advance(x, -n);
        return x;
    }

    // 27.5, predefined iterators
    template<class Iterator>
    class reverse_iterator{
    protected:
        Iterator current;

    public:
        using iterator_type     = Iterator;
        using iterator_category = typename iterator_traits<Iterator>::iterator_category;
        using value_type        = typename iterator_traits<Iterator>::value_type;
        using difference_type   = typename iterator_traits<Iterator>::difference_type;
        using pointer           = typename iterator_traits<Iterator>::pointer;
        using reference         = typename iterator_traits<Iterator>::reference;

        constexpr reverse_iterator():
            current{}{}

        constexpr explicit reverse_iterator(Iterator x):
            current{x.base()}{}

        template <class U>
        constexpr reverse_iterator(const reverse_iterator<U>& u):
            current{u.base()}{}

        template <class U>
        constexpr reverse_iterator& operator=(const reverse_iterator<U>& u){
            current = u.base();
            return *this;
        }

        constexpr Iterator base() const{
            return current;
        }
        constexpr reference operator*() const{
            Iterator tmp = current;
            return *--tmp;
        }
        constexpr pointer operator->() const{
            return std::addressof(operator*());
        }

        constexpr reverse_iterator& operator++(){
            --current;
            return *this;
        }
        constexpr reverse_iterator operator++(int){
            reverse_iterator tmp(*this);
            --current;
            return tmp;
        }
        constexpr reverse_iterator& operator--(){
            ++current;
            return *this;
        }
        constexpr reverse_iterator operator--(int){
            reverse_iterator tmp(*this);
            ++current;
            return tmp;
        }
        constexpr reverse_iterator operator+ (difference_type n) const{
            return reverse_iterator(current - n);
        }
        constexpr reverse_iterator& operator+=(difference_type n){
            current -= n;
            return *this;
        }
        constexpr reverse_iterator operator- (difference_type n) const{
            return reverse_iterator(current + n);
        }
        constexpr reverse_iterator& operator-=(difference_type n){
            current += n;
            return *this;
        }
        constexpr reference operator[](difference_type n) const{
            return *(*this + n);
        }
    };

    template<class Iterator1, class Iterator2>
    constexpr bool operator==(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() == y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator<(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() < y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator!=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() != y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator>(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() > y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator>=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() >= y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator<=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() <= y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr auto operator-(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y) ->decltype(y.base() - x.base()){
        return y.base() - x.base();
    }
    template<class Iterator>
    constexpr reverse_iterator<Iterator>
    operator+(
        typename reverse_iterator<Iterator>::difference_type n,
        const reverse_iterator<Iterator>& x){
        return reverse_iterator<Iterator>(x.base() - n);
    }

    template<class Iterator>
    constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i){
        return reverse_iterator<Iterator>(i);
    }

    template<class Container>
    class back_insert_iterator{
    protected:
        Container* container;

    public:
        using iterator_category = output_iterator_tag;
        using value_type        = void;
        using difference_type   = void;
        using pointer           = void;
        using reference         = void;
        using container_type    = Container;

        explicit back_insert_iterator(Container& x):
            container{std::addressof(x)}{}

        back_insert_iterator& operator=(const typename Container::value_type& value){
            container->push_back(value);
            return *this;
        }
        back_insert_iterator& operator=(typename Container::value_type&& value){
            container->push_back(std::move(value));
            return *this;
        }

        back_insert_iterator& operator*(){
            return *this;
        }
        back_insert_iterator& operator++(){
            return *this;
        }
        back_insert_iterator  operator++(int){
            return *this;
        }
    };

    template<class Container>
    back_insert_iterator<Container> back_inserter(Container& x){
        return back_insert_iterator<Container>(x);
    }

    template<class Container>
    class front_insert_iterator{
    protected:
        Container* container;

    public:
        using iterator_category = output_iterator_tag;
        using value_type        = void;
        using difference_type   = void;
        using pointer           = void;
        using reference         = void;
        using container_type    = Container;

        explicit front_insert_iterator(Container& x):
            container{std::addressof(x)}{}

        front_insert_iterator& operator=(const typename Container::value_type& value){
            container->push_front(value);
            return *this;
        }
        front_insert_iterator& operator=(typename Container::value_type&& value){
            container->push_front(std::move(value));
            return *this;
        }

        front_insert_iterator& operator*(){
            return *this;
        }
        front_insert_iterator& operator++(){
            return *this;
        }
        front_insert_iterator  operator++(int){
            return *this;
        }
    };

    template<class Container>
    front_insert_iterator<Container> front_inserter(Container& x){
        return front_insert_iterator<Container>(x);
    }

    template<class Container>
    class insert_iterator{
    protected:
        Container* container;
        typename Container::iterator iter;

    public:
        using iterator_category = output_iterator_tag;
        using value_type        = void;
        using difference_type   = void;
        using pointer           = void;
        using reference         = void;
        using container_type    = Container;

        insert_iterator(Container& x, typename Container::iterator i):
            container{std::addressof(x)},
            iter{i}{}

        insert_iterator& operator=(const typename Container::value_type& value){
            iter = container->insert(iter, value);
            ++iter;
            return *this;
        }
        insert_iterator& operator=(typename Container::value_type&& value){
            iter = container->insert(iter, std::move(value));
            ++iter;
            return *this;
        }

        insert_iterator& operator*(){
            return *this;
        }
        insert_iterator& operator++(){
            return *this;
        }
        insert_iterator& operator++(int){
            return *this;
        }
    };

    template<class Container>
    insert_iterator<Container> inserter(Container& x, typename Container::iterator i){
        return insert_iterator<Container>(x, i);
    }

    template<class Iterator>
    class move_iterator{
    public:
        using iterator_type     = Iterator;
        using iterator_category = typename iterator_traits<Iterator>::iterator_category;
        using value_type        = typename iterator_traits<Iterator>::value_type;
        using difference_type   = typename iterator_traits<Iterator>::difference_type;
        using pointer           = Iterator;
        using __reference       = typename iterator_traits<Iterator>::reference;
        using reference         = std::remove_reference_t<__reference>&&;

        constexpr move_iterator():
            current{}{}
        constexpr explicit move_iterator(Iterator i):
            current{i}{}

        template<class U>
        constexpr move_iterator(const move_iterator<U>& u):
            current{u.base()}{}

        template<class U>
        constexpr move_iterator& operator=(const move_iterator<U>& u){
            current = u.base();
        }

        constexpr iterator_type base() const{
            return current;
        }
        constexpr reference operator*() const{
            return static_cast<reference>(*current);
        }
        constexpr pointer operator->() const{
            return current;
        }
        constexpr move_iterator& operator++(){
            ++current;
            return *this;
        }
        constexpr move_iterator operator++(int){
            move_iterator tmp = *this;
            ++current;
            return tmp;
        }
        constexpr move_iterator& operator--(){
            --current;
            return *this;
        }
        constexpr move_iterator operator--(int){
            move_iterator tmp = *this;
            --current;
            return tmp;
        }
        constexpr move_iterator operator+(difference_type n) const{
            return move_iterator(current + n);
        }
        constexpr move_iterator& operator+=(difference_type n){
            current += n;
            return *this;
        }
        constexpr move_iterator operator-(difference_type n) const{
            return move_iterator(current - n);
        }
        constexpr move_iterator& operator-=(difference_type n){
            current -= n;
            return *this;
        }
        constexpr reference operator[](difference_type n) const{
            return std::move(current[n]);
        }

    private:
        Iterator current;
    };

    template<class Iterator1, class Iterator2>
    constexpr bool operator==(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y){
        return x.base() == y.base();
    }

    template<class Iterator1, class Iterator2>
    constexpr bool operator!=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y){
        return !(x.base() == y.base());
    }

    template<class Iterator1, class Iterator2>
    constexpr bool operator<(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y){
        return x.base() < y.base();
    }

    template<class Iterator1, class Iterator2>
    constexpr bool operator<=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y){
        return !(y < x);
    }

    template<class Iterator1, class Iterator2>
    constexpr bool operator>(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y){
        return y < x;
    }

    template<class Iterator1, class Iterator2>
    constexpr bool operator>=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y){
        return !(x < y);
    }

    template<class Iterator1, class Iterator2>
    constexpr auto operator-(
        const move_iterator<Iterator1>& x,
        const move_iterator<Iterator2>& y) -> decltype(x.base() - y.base()){
        return x.base() - y.base();
    }

    template<class Iterator>
    constexpr move_iterator<Iterator> operator+(
        typename move_iterator<Iterator>::difference_type n, const move_iterator<Iterator>& x){
        return x + n;
    }

    template<class Iterator>
    constexpr move_iterator<Iterator> make_move_iterator(Iterator i){
        return move_iterator<Iterator>(i);
    }

    // 27.6, stream iterators
    template<class T, class charT, class traits, class Distance>
    class istream_iterator{
    public:
        using iterator_category = input_iterator_tag;
        using value_type        = T;
        using difference_type   = Distance;
        using pointer           = const T*;
        using reference         = const T&;
        using char_type         = charT;
        using traits_type       = traits;
        using istream_type      = std::basic_istream<charT, traits>;

        constexpr istream_iterator():
            in_stream{0}{}

        istream_iterator(istream_type& s):
            in_stream{std::addressof(s)}{
            if(!(in_stream >> value))
                in_stream = 0;
        }

        istream_iterator(const istream_iterator& x) = default;
        ~istream_iterator() = default;

        const T& operator*() const{
            return value;
        }
        const T* operator->() const{
            return addressof(operator*());
        }

        istream_iterator& operator++(){
            if(!(*in_stream >> value))
                in_stream = 0;
            return *this;
        }
        istream_iterator  operator++(int){
            istream_iterator tmp = *this;
            ++(*this);
            return (tmp);
        }

    private:
        std::basic_istream<charT, traits>* in_stream;// exposition only
        T value;                               // exposition only
    };

    template <class T, class charT, class traits, class Distance>
    bool operator==(const istream_iterator<T, charT, traits, Distance>& x,
                    const istream_iterator<T, charT, traits, Distance>& y){
        return x.in_stream == y.in_stream;
    }
    template <class T, class charT, class traits, class Distance>
    bool operator!=(const istream_iterator<T, charT, traits, Distance>& x,
                    const istream_iterator<T, charT, traits, Distance>& y){
        return !(x == y);
    }

    template <class T, class charT, class traits>
    class ostream_iterator{
    public:
        using iterator_category = output_iterator_tag;
        using value_type        = void;
        using difference_type   = void;
        using pointer           = void;
        using reference         = void;
        using char_type         = charT;
        using traits_type       = traits;
        using ostream_type      = std::basic_ostream<charT, traits>;

        ostream_iterator(ostream_type& s):
            out_stream{std::addressof(s)},
            delim{NULL}{}

        ostream_iterator(ostream_type& s, const charT* delimiter):
            out_stream{std::addressof(s)},
            delim{delimiter}{}

        ostream_iterator(const ostream_iterator& x):
            out_stream{x.out_stream},
            delim{x.delim}{}

        ostream_iterator& operator=(const T& value){
            *out_stream << value;
            if(delim != 0)
                *out_stream << delim;
            return *this;
        }
        ostream_iterator& operator*(){
            return *this;
        }
        ostream_iterator& operator++(){
            return *this;
        }
        ostream_iterator& operator++(int){
            return *this;
        }

    private:
        std::basic_ostream<charT, traits>* out_stream;// exposition only
        const charT* delim;// exposition only
    };

    template<class charT, class traits>
    class istreambuf_iterator{
    public:
        using iterator_category = input_iterator_tag;
        using value_type        = charT;
        using difference_type   = typename traits::off_type;
        using pointer           = charT*;
        using reference         = charT;
        using char_type         = charT;
        using traits_type       = traits;
        using int_type          = typename traits::int_type;
        using streambuf_type    = std::basic_streambuf<charT, traits>;
        using istream_type      = std::basic_istream<charT, traits>;

        class proxy{
            charT keep_;
            basic_streambuf<charT, traits>* sbuf_;

            proxy(charT c, std::basic_streambuf<charT, traits>* sbuf):
                keep_(c),
                sbuf_(sbuf){}

        public:
            charT operator*(){
                return keep_;
            }
        };

        constexpr istreambuf_iterator()noexcept: sbuf_{nullptr}{}
        istreambuf_iterator(const istreambuf_iterator&)noexcept = default;
        ~istreambuf_iterator() = default;
        istreambuf_iterator(istream_type& s)noexcept:
            sbuf_{s.rdbuf()}{}
        istreambuf_iterator(streambuf_type* s)noexcept:
            sbuf_{s}{}
        istreambuf_iterator(const proxy& p)noexcept:
            sbuf_{p.sbuf_}{}

        charT operator*()const{
            return sbuf_->sgetc();
        }
        istreambuf_iterator& operator++(){
            sbuf_->sbumpc();
            return *this;
        }
        proxy operator++(int){
            return proxy(sbuf_->sbumpc(), sbuf_);
        }
        bool equal(const istreambuf_iterator& b)const{
            return
                traits_type::eq_int_type(sbuf_->sgetc(), traits_type::eof()) ==
                traits_type::eq_int_type(b.sbuf_->sgetc(), traits_type::eof());
        }

    private:
        streambuf_type* sbuf_;// exposition only
    };

    template <class charT, class traits>
    bool operator==(const istreambuf_iterator<charT, traits>& a,
                    const istreambuf_iterator<charT, traits>& b){
        return a.equal(b);
    }
    template <class charT, class traits>
    bool operator!=(const istreambuf_iterator<charT, traits>& a,
                    const istreambuf_iterator<charT, traits>& b){
        return !a.equal(b);
    }

    template <class charT, class traits>
    class ostreambuf_iterator{
    public:
        using iterator_category = output_iterator_tag;
        using value_type        = void;
        using difference_type   = void;
        using pointer           = void;
        using reference         = void;
        using char_type         = charT;
        using traits_type       = traits;
        using streambuf_type    = std::basic_streambuf<charT, traits>;
        using ostream_type      = std::basic_ostream<charT, traits>;

        ostreambuf_iterator(ostream_type& s)noexcept:
            sbuf_{s.rdbuf()}{}
        ostreambuf_iterator(streambuf_type* s)noexcept:
            sbuf_{s}{}
        ostreambuf_iterator& operator=(charT c){
            if (sbuf_ && traits_type::eq_int_type(sbuf_->sputc(c), traits_type::eof()))
                sbuf_ = NULL;
            return *this;
        }
        ostreambuf_iterator& operator*(){
            return *this;
        }
        ostreambuf_iterator& operator++(){
            return *this;
        }
        ostreambuf_iterator& operator++(int){
            return *this;
        }

        bool failed()const noexcept{
            return sbuf_ == NULL;
        }

    private:
        streambuf_type* sbuf_;
    };

    // 27.7, range access
    template<class C>
    constexpr auto begin(C& c) -> decltype(c.begin()){
        return c.begin();
    }

    template<class C>
    constexpr auto begin(const C& c) -> decltype(c.begin()){
        return c.begin();
    }

    template<class C>
    constexpr auto end(C& c) -> decltype(c.end()){
        return c.end();
    }

    template<class C>
    constexpr auto end(const C& c) -> decltype(c.end()){
        return c.end();
    }

    template<class T, size_t N>
    constexpr T* begin(T (&array)[N])noexcept{
        return array;
    }

    template<class T, size_t N>
    constexpr T* end(T (&array)[N])noexcept{
        return array + N;
    }

    template<class C>
    constexpr auto cbegin(const C& c)noexcept(noexcept(std::begin(c)))
        -> decltype(std::begin(c)){
        return std::begin(c);
    }

    template<class C>
    constexpr auto cend(const C& c)noexcept(noexcept(std::end(c)))
        -> decltype(std::end(c)){
        return std::end(c);
    }

    template<class C>
    constexpr auto rbegin(C& c) -> decltype(c.rbegin()){
        return c.rbegin();
    }

    template<class C>
    constexpr auto rbegin(const C& c) -> decltype(c.rbegin()){
        return c.rbegin();
    }

    template<class C>
    constexpr auto rend(C& c) -> decltype(c.rend()){
        return c.rend();
    }

    template<class C>
    constexpr auto rend(const C& c) -> decltype(c.rend()){
        return c.rend();
    }

    template<class T, size_t N>
    constexpr reverse_iterator<T*> rbegin(T (&array)[N]){
        return reverse_iterator<T*>(array + N);
    }

    template<class T, size_t N>
    constexpr reverse_iterator<T*> rend(T (&array)[N]){
        return reverse_iterator<T*>(array);
    }

    template<class E>
    constexpr reverse_iterator<const E*> rbegin(initializer_list<E> il){
        return reverse_iterator<const E*>(il.end());
    }

    template<class E>
    constexpr reverse_iterator<const E*> rend(initializer_list<E> il){
        return reverse_iterator<const E*>(il.begin());
    }

    template<class C>
    constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c)){
        return std::rbegin(c);
    }

    template<class C>
    constexpr auto crend(const C& c) -> decltype(std::rend(c)){
        return std::rend(c);
    }


    // 27.8, container access
    template<class C>
    constexpr auto size(const C& c) -> decltype(c.size()){
        return c.size();
    }

    template<class T, size_t N>
    constexpr size_t size(const T (&)[N])noexcept{
        return N;
    }

    template<class C>
    constexpr auto empty(const C& c) -> decltype(c.empty()){
        return c.empty();
    }

    template<class T, size_t N>
    constexpr bool empty(const T (&)[N])noexcept{
        return false;
    }

    template<class E>
    constexpr bool empty(initializer_list<E> il)noexcept{
        return il.size() == 0;
    }

    template<class C>
    constexpr auto data(C& c) -> decltype(c.data()){
        return c.data();
    }

    template<class C>
    constexpr auto data(const C& c) -> decltype(c.data()){
        return c.data();
    }

    template<class T, size_t N>
    constexpr T* data(T (&array)[N])noexcept{
        return array;
    }

    template<class E>
    constexpr const E* data(initializer_list<E> il)noexcept{
        return il.begin();
    }
}

#endif /* __ITERATOR__ */
