/** -*- mode: c++ -*-
 * @file   libcpp/include/array
 * @author Peter Züger
 * @date   31.07.2018
 * @brief  std::array
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __ARRAY__
#define __ARRAY__

#include <__move>
#include <__swap>
#include <__tuple>
#include <initializer_list>
#include <iterator>
#include <stdexcept>
#include <type_traits>

namespace std{
    // 26.3.7, class template array
    template<class T, std::size_t N>
    struct array{
        // types:
        using value_type             = T;
        using pointer                = value_type*;
        using const_pointer          = const value_type*;
        using reference              = value_type&;
        using const_reference        = const value_type&;
        using size_type              = std::size_t;
        using difference_type        = std::ptrdiff_t;
        using iterator               = pointer; // see 26.2
        using const_iterator         = const_pointer; // see 26.2
        using reverse_iterator       = std::reverse_iterator<iterator>;
        using const_reverse_iterator = std::reverse_iterator<const_iterator>;

        value_type _elem[N];

        // no explicit construct/copy/destroy for aggregate type

        void fill(const_reference u){
            for(size_type i = 0; i < N; i++)
                _elem[i] = u;
        }

        void swap(array& other)noexcept(std::is_nothrow_swappable_v<value_type>){
            for(size_type i = 0; i < N; i++)
                std::swap(other[i], _elem[i]);
        }

        // iterators:
        constexpr iterator begin()noexcept{
            return iterator(data());
        }
        constexpr const_iterator begin()const noexcept{
            return const_iterator(data());
        }
        constexpr iterator end()noexcept{
            return iterator(data()+N);
        }
        constexpr const_iterator end()const noexcept{
            return const_iterator(data()+N);
        }

        // reverse iterators
        constexpr reverse_iterator rbegin()noexcept{
            return reverse_iterator(end());
        }
        constexpr const_reverse_iterator rbegin()const noexcept{
            return const_reverse_iterator(end());
        }
        constexpr reverse_iterator rend()noexcept{
            return reverse_iterator(begin());
        }
        constexpr const_reverse_iterator rend()const noexcept{
            return const_reverse_iterator(begin());
        }

        // const iterators
        constexpr const_iterator cbegin()const noexcept{
            return begin();
        }
        constexpr const_iterator cend()const noexcept{
            return end();
        }
        constexpr const_reverse_iterator crbegin()const noexcept{
            return rbegin();
        }
        constexpr const_reverse_iterator crend()const noexcept{
            return rend();
        }

        // capacity:
        constexpr bool empty()const noexcept{
            return false;
        }
        constexpr size_type size()const noexcept{
            return N;
        }
        constexpr size_type max_size()const noexcept{
            return N;
        }

        // element access:
        constexpr reference operator[](size_type n){
            return _elem[n];
        }
        constexpr const_reference operator[](size_type n)const{
            return _elem[n];
        }
        constexpr reference at(size_type n){
            if(n >= N)
                __throw_out_of_range("array::at");
            return _elem[n];
        }
        constexpr const_reference at(size_type n)const{
            if(n >= N)
                __throw_out_of_range("array::at");
            return _elem[n];
        }

        constexpr reference front(){
            return _elem[0];
        }
        constexpr const_reference front()const{
            return _elem[0];
        }
        constexpr reference back(){
            return _elem[N-1];
        }
        constexpr const_reference back()const{
            return _elem[N-1];
        }

        constexpr pointer data()noexcept{
            return _elem;
        }
        constexpr const_pointer data()const noexcept{
            return _elem;
        }
    };

    template<class T>
    struct array<T, 0>{
        // types:
        using value_type             = T;
        using pointer                = value_type*;
        using const_pointer          = const value_type*;
        using reference              = value_type&;
        using const_reference        = const value_type&;
        using size_type              = std::size_t;
        using difference_type        = std::ptrdiff_t;
        using iterator               = pointer; // see 26.2
        using const_iterator         = const_pointer; // see 26.2
        using reverse_iterator       = std::reverse_iterator<iterator>;
        using const_reverse_iterator = std::reverse_iterator<const_iterator>;

        const char _elem[sizeof(value_type)];

        // no explicit construct/copy/destroy for aggregate type

        void fill(const_reference){
            static_assert(!std::is_const_v<value_type>,
                          "cannot fill zero-sized array of type 'const T'");
        }
        void swap(array&)noexcept{
            static_assert(!std::is_const_v<value_type>,
                          "cannot swap zero-sized array of type 'const T'");
        }

        // iterators:
        constexpr iterator begin()noexcept{
            return iterator(data());
        }
        constexpr const_iterator begin()const noexcept{
            return const_iterator(data());
        }
        constexpr iterator end()noexcept{
            return iterator(data());
        }
        constexpr const_iterator end()const noexcept{
            return const_iterator(data());
        }

        // reverse iterators
        constexpr reverse_iterator rbegin()noexcept{
            return reverse_iterator(end());
        }
        constexpr const_reverse_iterator rbegin()const noexcept{
            return const_reverse_iterator(end());
        }
        constexpr reverse_iterator rend()noexcept{
            return reverse_iterator(begin());
        }
        constexpr const_reverse_iterator rend()const noexcept{
            return const_reverse_iterator(begin());
        }

        // const iterators
        constexpr const_iterator cbegin()const noexcept{
            return begin();
        }
        constexpr const_iterator cend()const noexcept{
            return end();
        }
        constexpr const_reverse_iterator crbegin()const noexcept{
            return rbegin();
        }
        constexpr const_reverse_iterator crend()const noexcept{
            return rend();
        }

        // capacity:
        constexpr bool empty()const noexcept{
            return true;
        }
        constexpr size_type size()const noexcept{
            return 0;
        }
        constexpr size_type max_size()const noexcept{
            return 0;
        }

        // element access:
        constexpr reference operator[](size_type){
            static_assert(!std::is_const_v<value_type>,
                          "cannot call array<T, 0>::operator[] on a zero-sized array");
        }
        constexpr const_reference operator[](size_type)const{
            static_assert(!std::is_const_v<value_type>,
                          "cannot call array<T, 0>::operator[] on a zero-sized array");
        }
        constexpr reference at(size_type){
            __throw_out_of_range("array<T, 0>::at");
        }
        constexpr const_reference at(size_type)const{
            __throw_out_of_range("array<T, 0>::at");
        }

        constexpr reference front(){
            static_assert(!std::is_const_v<value_type>,
                          "cannot call array<T, 0>::front() on a zero-sized array");
        }
        constexpr const_reference front()const{
            static_assert(!std::is_const_v<value_type>,
                          "cannot call array<T, 0>::front() on a zero-sized array");
        }
        constexpr reference back(){
            static_assert(!std::is_const_v<value_type>,
                          "cannot call array<T, 0>::back() on a zero-sized array");
        }
        constexpr const_reference back()const{
            static_assert(!std::is_const_v<value_type>,
                          "cannot call array<T, 0>::back() on a zero-sized array");
        }

        constexpr pointer data()noexcept{
            return reinterpret_cast<pointer>(_elem);
        }
        constexpr const_pointer data()const noexcept{
            return reinterpret_cast<const_pointer>(_elem);
        }
    };


    // array template deduction
    template<class T, class... U,
             class = typename std::enable_if<(std::is_same_v<T, U> && ...), void>::type>
    array(T, U...) -> array<T, 1 + sizeof...(U)>;

    // array specialized algorithms
    template<class T, std::size_t N>
    bool operator==(const array<T, N>& x, const array<T, N>& y){
        for(size_t i = 0; i < N; i++)
            if(!(x[i] == y[i]))
                return false;
        return true;
    }

    template<class T, std::size_t N>
    bool operator!=(const array<T, N>& x, const array<T, N>& y){
        return !(x == y);
    }

    template<class T, std::size_t N>
    bool operator< (const array<T, N>& x, const array<T, N>& y){
        for(size_t i = 0; i < N; i++){
            if(x[i] < y[i])return true;
            if(y[i] < x[i])return false;
        }
        return false;
    }

    template<class T, std::size_t N>
    bool operator> (const array<T, N>& x, const array<T, N>& y){
        return y < x;
    }

    template<class T, std::size_t N>
    bool operator<=(const array<T, N>& x, const array<T, N>& y){
        return !(y < x);
    }

    template<class T, std::size_t N>
    bool operator>=(const array<T, N>& x, const array<T, N>& y){
        return !(x < y);
    }

    template<class T, std::size_t N>
    std::enable_if_t<(N == 0) || std::is_swappable_v<T>, void>
    swap(array<T, N>& x, array<T, N>& y)noexcept(noexcept(x.swap(y))){
        x.swap(y);
    }


    template<class T, std::size_t N>
    class tuple_size<array<T, N>>:
        std::integral_constant<std::size_t, N>{};

    template<std::size_t I, class T, std::size_t N>
    class tuple_element<I, array<T, N>>{
        static_assert(I < N, "Index out of bounds in std::tuple_element<> (std::array)");

    public:
        using type = T;
    };


    template<std::size_t I, class T, std::size_t N>
    constexpr T& get(array<T, N>& a)noexcept{
        static_assert(I < N, "Index out of bounds in std::get<> (std::array)");
        return a._elem[I];
    }

    template<std::size_t I, class T, std::size_t N>
    constexpr T&& get(array<T, N>&& a)noexcept{
        static_assert(I < N, "Index out of bounds in std::get<> (const std::array)");
        return a._elem[I];
    }

    template<std::size_t I, class T, std::size_t N>
    constexpr const T& get(const array<T, N>& a)noexcept{
        static_assert(I < N, "Index out of bounds in std::get<> (std::array &&)");
        return std::move(a._elem[I]);
    }

    template<std::size_t I, class T, std::size_t N>
    constexpr const T&& get(const array<T, N>&& a)noexcept{
        static_assert(I < N, "Index out of bounds in std::get<> (const std::array &&)");
        return std::move(a._elem[I]);
    }
}

#endif /* __ARRAY__ */
