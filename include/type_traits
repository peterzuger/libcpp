/** -*- mode: c++ -*-
 * @file   libcpp/include/type_traits
 * @author Peter Züger
 * @date   12.10.2018
 * @note   part of the freestanding headers
 * @brief  std::type_traits
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __TYPE_TRAITS__
#define __TYPE_TRAITS__

#include <__type_traits>
#include <__declval>
#include <cstddef> // for nullptr_t

namespace std{
    // 23.15.3, helper class
    template<class T, T v>
    struct integral_constant{
        using value_type = T;
        using type       = integral_constant<T, v>;

        static constexpr T value = v;

        constexpr operator value_type()const noexcept{ return value; }
        constexpr value_type operator()()const noexcept{ return value; }
    };


    template<bool B>
    using bool_constant = integral_constant<bool, B>;

    using true_type  = bool_constant<true>;
    using false_type = bool_constant<false>;

    // 23.15.4.1, primary type categories
    template<class T> struct is_void: public false_type{};
    template<> struct is_void<void>: public true_type{};

    template<class T> struct is_null_pointer: public false_type{};
    template<> struct is_null_pointer<std::nullptr_t>: public true_type{};

    template<class T> struct __is_integral_impl: public false_type{};
    template<> struct __is_integral_impl<bool>: public true_type{};
    template<> struct __is_integral_impl<char>: public true_type{};
    template<> struct __is_integral_impl<signed char>: public true_type{};
    template<> struct __is_integral_impl<unsigned char>: public true_type{};
    template<> struct __is_integral_impl<wchar_t>: public true_type{};
#if defined(char8_t)
    template<> struct __is_integral_impl<char8_t>: public true_type{};
#endif /* defined(char8_t) */
    template<> struct __is_integral_impl<char16_t>: public true_type{};
    template<> struct __is_integral_impl<char32_t>: public true_type{};
    template<> struct __is_integral_impl<short>: public true_type{};
    template<> struct __is_integral_impl<unsigned short>: public true_type{};
    template<> struct __is_integral_impl<int>: public true_type{};
    template<> struct __is_integral_impl<unsigned int>: public true_type{};
    template<> struct __is_integral_impl<long>: public true_type{};
    template<> struct __is_integral_impl<unsigned long>: public true_type{};
    template<> struct __is_integral_impl<long long>: public true_type{};
    template<> struct __is_integral_impl<unsigned long long>: public true_type{};
#if defined(__int128_t)
    template<> struct __is_integral_impl<__int128_t>: public true_type{};
#endif /* defined(__int128_t) */
#if defined(__uint128_t)
    template<> struct __is_integral_impl<__uint128_t>: public true_type{};
#endif /* defined(__uint128_t) */

    template<class T> struct is_integral: public __is_integral_impl<remove_cv_t<T>>{};

    template<class T> struct __is_floating_point_impl: public false_type{};
    template<> struct __is_floating_point_impl<float>: public true_type{};
    template<> struct __is_floating_point_impl<double>: public true_type{};
    template<> struct __is_floating_point_impl<long double>: public true_type{};

    template<class T> struct is_floating_point: public __is_floating_point_impl<remove_cv_t<T>>{};

    template<class T> struct is_array: public false_type{};
    template<class T> struct is_array<T[]>: public true_type{};
    template<class T, std::size_t N> struct is_array<T[N]>: public true_type{};

    template<class T> struct is_pointer: public false_type{};
    template<class T> struct is_pointer<T*>: public true_type{};

    template<class T> struct is_lvalue_reference: public false_type{};
    template<class T> struct is_lvalue_reference<T&>: public true_type{};

    template<class T> struct is_rvalue_reference: public false_type{};
    template<class T> struct is_rvalue_reference<T&&>: public true_type{};

    template<class T> struct is_enum: public bool_constant<__is_enum(T)>{};

    template<class T> struct is_union: public bool_constant<__is_union(T)>{};

    template<class T> struct is_class: public bool_constant<__is_class(T)>{};

    // 23.15.4.2, composite type categories
    template<class T> struct is_reference: public false_type{};
    template<class T> struct is_reference<T&>: public true_type{};
    template<class T> struct is_reference<T&&>: public true_type{};

    template<class T> struct is_arithmetic: public bool_constant<is_integral<T>::value ||
                                                                 is_floating_point<T>::value>{};

    template<class T> struct is_fundamental: public bool_constant<is_void<T>::value ||
                                                                  is_null_pointer<T>::value ||
                                                                  is_arithmetic<T>::value>{};
    template<class T> struct is_object;

    template<class T> struct is_scalar;

    template<class T> struct is_compound;

    template<class T> struct is_member_pointer: public false_type{};
    template<class T, class U> struct is_member_pointer<T U::*>: public true_type{};

    // 23.15.4.3, type properties
    template<class T> struct is_const: public false_type{};
    template<class T> struct is_const<const T>: public true_type{};

    template<class T> struct is_volatile: public false_type{};
    template<class T> struct is_volatile<volatile T>: public true_type{};

    template<class T> struct is_trivial: public bool_constant<__is_trivial(T)>{};

    template<class T> struct is_trivially_copyable;

    template<class T> struct is_standard_layout: public bool_constant<__is_standard_layout(T)>{};

    template<class T> struct is_pod: public bool_constant<__is_pod(T)>{};

    template<class T> struct is_empty: public bool_constant<__is_empty(T)>{};

    template<class T> struct is_polymorphic: public bool_constant<__is_polymorphic(T)>{};

    template<class T> struct is_abstract: public bool_constant<__is_abstract(T)>{};

    template<class T> struct is_final;

    template<class T> struct is_aggregate;

    template<class T, bool = is_arithmetic<T>::value>
    struct __is_signed_impl: bool_constant<T(-1) < T(0)>{};

    template<class T>
    struct __is_signed_impl<T, false>: false_type{};

    template<class T> struct is_signed: __is_signed_impl<T>::type{};

    template<class T, bool = is_arithmetic<T>::value>
    struct __is_unsigned_impl: bool_constant<T(0) < T(-1)>{};

    template<class T>
    struct __is_unsigned_impl<T, false>: false_type{};

    template<class T> struct is_unsigned: __is_unsigned_impl<T>::type{};

    template<class T, class... Args> struct is_constructible;

    template<class T> struct is_default_constructible;

    template<class T> struct is_copy_constructible;

    template<class T> struct is_move_constructible;

    template<class T, class U> struct is_assignable;

    template<class T> struct is_copy_assignable;

    template<class T> struct is_move_assignable;

    template<class T, class U> struct is_swappable_with;

    template<class T> struct is_swappable;

    template<class T> struct is_destructible;

    template<class T, class... Args> struct is_trivially_constructible;

    template<class T> struct is_trivially_default_constructible;

    template<class T> struct is_trivially_copy_constructible;

    template<class T> struct is_trivially_move_constructible;

    template<class T, class U> struct is_trivially_assignable;

    template<class T> struct is_trivially_copy_assignable;

    template<class T> struct is_trivially_move_assignable;

    template<class T> struct is_trivially_destructible;

    template<typename T, typename... Args>
    struct __is_nothrow_constructible_impl:
        public bool_constant<noexcept(T(declval<Args>()...))>{};

    template<typename T, typename Arg>
    struct __is_nothrow_constructible_impl<T, Arg>:
        public bool_constant<noexcept(static_cast<T>(declval<Arg>()))>{};

    template<class T, class... Args>
    struct is_nothrow_constructible:
        public __is_nothrow_constructible_impl<T, Args...>{};

    template<class T> struct is_nothrow_default_constructible;

    template<class T> struct is_nothrow_copy_constructible;

    template<class T> struct is_nothrow_move_constructible:
        public is_nothrow_constructible<T, typename add_rvalue_reference<T>::type>{};

    template<class T, class U> struct is_nothrow_assignable;

    template<class T> struct is_nothrow_copy_assignable;

    template<class T> struct is_nothrow_move_assignable;

    template<class T, class U> struct is_nothrow_swappable_with;

    template<class T> struct is_nothrow_swappable;

    template<class T> struct is_nothrow_destructible;

    template<class T> struct has_virtual_destructor;

    template<class T> struct has_unique_object_representations;

    // 23.15.5, type property queries
    template<class T> struct alignment_of:
        public integral_constant<std::size_t, alignof(T)>{};

    template<class T> struct rank:
        public integral_constant<std::size_t, 0>{};
    template<class T> struct rank<T[]>:
        public integral_constant<std::size_t, rank<T>::value + 1>{};
    template<class T, std::size_t N> struct rank<T[N]>:
        public integral_constant<std::size_t, rank<T>::value + 1>{};

    template<class T, unsigned I = 0> struct extent:
        public integral_constant<std::size_t, 0>{};
    template<class T> struct extent<T[], 0>:
        public integral_constant<std::size_t, 0>{};
    template<class T, unsigned I> struct extent<T[], I>:
        public integral_constant<std::size_t, extent<T, I-1>::value>{};
    template<class T, std::size_t N> struct extent<T[N], 0>:
        public integral_constant<std::size_t, N>{};
    template<class T, std::size_t N, unsigned I> struct extent<T[N], I>:
        public integral_constant<std::size_t, extent<T, I-1>::value>{};

    // 23.15.6, type relations
    template<class T, class U> struct is_same: public false_type{};
    template<class T> struct is_same<T, T>: public true_type{};

    template<class Base, class Derived> struct is_base_of;

    template<class From, class To> struct is_convertible;

    template<class Fn, class... ArgTypes> struct is_invocable;

    template<class R, class Fn, class... ArgTypes> struct is_invocable_r;

    template<class Fn, class... ArgTypes> struct is_nothrow_invocable;

    template<class R, class Fn, class... ArgTypes> struct is_nothrow_invocable_r;

    // 23.15.7.1, const-volatile modifications
    // 23.15.7.2, reference modifications
    // defined in __type_traits

    // 23.15.7.3, sign modifications
    template<class T> struct make_signed;
    template<class T> struct make_unsigned;
    template<class T> using make_signed_t   = typename make_signed<T>::type;
    template<class T> using make_unsigned_t = typename make_unsigned<T>::type;

    // 23.15.7.4, array modifications
    template<class T> struct remove_extent{using type = T;};
    template<class T> struct remove_extent<T[]>{using type = T;};
    template<class T, std::size_t N> struct remove_extent<T[N]>{using type = T;};

    template<class T> struct remove_all_extents{using type = T;};
    template<class T> struct remove_all_extents<T[]>{using type = typename remove_all_extents<T>::type;};
    template<class T, std::size_t N> struct remove_all_extents<T[N]>{using type = typename remove_all_extents<T>::type;};

    template<class T> using remove_extent_t      = typename remove_extent<T>::type;
    template<class T> using remove_all_extents_t = typename remove_all_extents<T>::type;

    // 23.15.7.5, pointer modifications
    template<class T> struct remove_pointer{using type = T;};
    template<class T> struct remove_pointer<T*>{using type = T;};
    template<class T> struct remove_pointer<T* const>{using type = T;};
    template<class T> struct remove_pointer<T* volatile>{using type = T;};
    template<class T> struct remove_pointer<T* const volatile>{using type = T;};

    template<class T> struct add_pointer{using type = T*;};
    template<class T> struct add_pointer<T*>{using type = T*;};
    template<class T> struct add_pointer<const T*>{using type = T*;};
    template<class T> struct add_pointer<volatile T*>{using type = T*;};
    template<class T> struct add_pointer<const volatile T*>{using type = T*;};

    template<class T> using remove_pointer_t = typename remove_pointer<T>::type;
    template<class T> using add_pointer_t    = typename add_pointer<T>::type;


    // 23.15.4.1, more primary type categories ...
    template<class T> struct __is_function_impl: public false_type{};
    template<class T, class ...Args> struct __is_function_impl<T(Args...)>: public true_type{};
    template<class T, class ...Args> struct __is_function_impl<T(Args..., ...)>: public true_type{};

    template<class T> struct is_function: __is_function_impl<remove_reference_t<remove_cv_t<T>>>{};


    template<class T> struct is_member_object_pointer:
        public bool_constant<is_member_pointer<T>::value && is_object<T>::value>{};

    template<class T> struct is_member_function_pointer:
        public bool_constant<is_member_pointer<T>::value && is_function<T>::value>{};

    // 23.15.7.6, other transformations
    template<std::size_t Len, std::size_t Align = sizeof(int)> struct aligned_storage;
    template<std::size_t Len, class... Types>             struct aligned_union;

    template<bool, class T = void>                   struct enable_if{};
    template<class T>                                struct enable_if<true, T>{using type = T;};

    template<bool, class T, class F>                 struct conditional{using type = T;};
    template<class T, class F>                       struct conditional<false, T, F>{using type = F;};

    template<class T>
    struct decay{
    private:
        using U = typename remove_reference<T>::type;

    public:
        using type = typename conditional<is_array<U>::value,
                                          typename remove_extent<U>::type*,
                                          typename conditional<
                                              is_function<U>::value,
                                              typename add_pointer<U>::type,
                                              typename remove_cv<U>::type
                                              >::type
                                          >::type;
    };

    template<class... T>                             struct common_type;
    template<class T>                                struct underlying_type;
    template<class Fn, class... ArgTypes>            struct invoke_result;

    template<std::size_t Len, std::size_t Align = sizeof(int)> using aligned_storage_t = typename aligned_storage<Len, Align>::type;
    template<std::size_t Len, class... Types>             using aligned_union_t   = typename aligned_union<Len, Types...>::type;
    template<class T>                                using decay_t           = typename decay<T>::type;
    template<bool b, class T = void>                 using enable_if_t       = typename enable_if<b, T>::type;
    template<bool b, class T, class F>               using conditional_t     = typename conditional<b, T, F>::type;
    template<class... T>                             using common_type_t     = typename common_type<T...>::type;
    template<class T>                                using underlying_type_t = typename underlying_type<T>::type;
    template<class Fn, class... ArgTypes>            using invoke_result_t   = typename invoke_result<Fn, ArgTypes...>::type;
    template<class...>                               using void_t            = void;

    // 23.15.8, logical operator traits
    template<class... B> struct conjunction: public true_type{};
    template<class B1>   struct conjunction<B1>: public B1{};
    template<class B1, class... Bn>
    struct conjunction<B1, Bn...>: public conditional_t<bool(B1::value), conjunction<Bn...>, B1>{};

    template<class... B> struct disjunction: public true_type{};
    template<class B1> struct disjunction<B1>: public B1{};
    template<class B1, class... Bn>
    struct disjunction<B1, Bn...>: public conditional_t<bool(B1::value), B1, disjunction<Bn...>>{};

    template<class B> struct negation: public bool_constant<!bool(B::value)>{};

    // 23.15.4.1, primary type categories
    template<class T> inline constexpr bool is_void_v                    = is_void<T>::value;
    template<class T> inline constexpr bool is_null_pointer_v            = is_null_pointer<T>::value;
    template<class T> inline constexpr bool is_integral_v                = is_integral<T>::value;
    template<class T> inline constexpr bool is_floating_point_v          = is_floating_point<T>::value;
    template<class T> inline constexpr bool is_array_v                   = is_array<T>::value;
    template<class T> inline constexpr bool is_pointer_v                 = is_pointer<T>::value;
    template<class T> inline constexpr bool is_lvalue_reference_v        = is_lvalue_reference<T>::value;
    template<class T> inline constexpr bool is_rvalue_reference_v        = is_rvalue_reference<T>::value;
    template<class T> inline constexpr bool is_member_object_pointer_v   = is_member_object_pointer<T>::value;
    template<class T> inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;
    template<class T> inline constexpr bool is_enum_v                    = is_enum<T>::value;
    template<class T> inline constexpr bool is_union_v                   = is_union<T>::value;
    template<class T> inline constexpr bool is_class_v                   = is_class<T>::value;
    template<class T> inline constexpr bool is_function_v                = is_function<T>::value;

    // 23.15.4.2, composite type categories
    template<class T> inline constexpr bool is_reference_v      = is_reference<T>::value;
    template<class T> inline constexpr bool is_arithmetic_v     = is_arithmetic<T>::value;
    template<class T> inline constexpr bool is_fundamental_v    = is_fundamental<T>::value;
    template<class T> inline constexpr bool is_object_v         = is_object<T>::value;
    template<class T> inline constexpr bool is_scalar_v         = is_scalar<T>::value;
    template<class T> inline constexpr bool is_compound_v       = is_compound<T>::value;
    template<class T> inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

    // 23.15.4.3, type properties
    template<class T>          inline constexpr bool is_const_v                           = is_const<T>::value;
    template<class T>          inline constexpr bool is_volatile_v                        = is_volatile<T>::value;
    template<class T>          inline constexpr bool is_trivial_v                         = is_trivial<T>::value;
    template<class T>          inline constexpr bool is_trivially_copyable_v              = is_trivially_copyable<T>::value;
    template<class T>          inline constexpr bool is_standard_layout_v                 = is_standard_layout<T>::value;
    template<class T>          inline constexpr bool is_pod_v                             = is_pod<T>::value;
    template<class T>          inline constexpr bool is_empty_v                           = is_empty<T>::value;
    template<class T>          inline constexpr bool is_polymorphic_v                     = is_polymorphic<T>::value;
    template<class T>          inline constexpr bool is_abstract_v                        = is_abstract<T>::value;
    template<class T>          inline constexpr bool is_final_v                           = is_final<T>::value;
    template<class T>          inline constexpr bool is_aggregate_v                       = is_aggregate<T>::value;
    template<class T>          inline constexpr bool is_signed_v                          = is_signed<T>::value;
    template<class T>          inline constexpr bool is_unsigned_v                        = is_unsigned<T>::value;
    template<class T, class... Args> inline constexpr bool is_constructible_v             = is_constructible<T, Args...>::value;
    template<class T>          inline constexpr bool is_default_constructible_v           = is_default_constructible<T>::value;
    template<class T>          inline constexpr bool is_copy_constructible_v              = is_copy_constructible<T>::value;
    template<class T>          inline constexpr bool is_move_constructible_v              = is_move_constructible<T>::value;
    template<class T, class U> inline constexpr bool is_assignable_v                      = is_assignable<T, U>::value;
    template<class T>          inline constexpr bool is_copy_assignable_v                 = is_copy_assignable<T>::value;
    template<class T>          inline constexpr bool is_move_assignable_v                 = is_move_assignable<T>::value;
    template<class T, class U> inline constexpr bool is_swappable_with_v                  = is_swappable_with<T, U>::value;
    template<class T>          inline constexpr bool is_swappable_v                       = is_swappable<T>::value;
    template<class T>          inline constexpr bool is_destructible_v                    = is_destructible<T>::value;
    template<class T, class... Args> inline constexpr bool is_trivially_constructible_v   = is_trivially_constructible<T, Args...>::value;
    template<class T>          inline constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<T>::value;
    template<class T>          inline constexpr bool is_trivially_copy_constructible_v    = is_trivially_copy_constructible<T>::value;
    template<class T>          inline constexpr bool is_trivially_move_constructible_v    = is_trivially_move_constructible<T>::value;
    template<class T, class U> inline constexpr bool is_trivially_assignable_v            = is_trivially_assignable<T, U>::value;
    template<class T>          inline constexpr bool is_trivially_copy_assignable_v       = is_trivially_copy_assignable<T>::value;
    template<class T>          inline constexpr bool is_trivially_move_assignable_v       = is_trivially_move_assignable<T>::value;
    template<class T>          inline constexpr bool is_trivially_destructible_v          = is_trivially_destructible<T>::value;
    template<class T, class... Args> inline constexpr bool is_nothrow_constructible_v     = is_nothrow_constructible<T, Args...>::value;
    template<class T>          inline constexpr bool is_nothrow_default_constructible_v   = is_nothrow_default_constructible<T>::value;
    template<class T>          inline constexpr bool is_nothrow_copy_constructible_v      = is_nothrow_copy_constructible<T>::value;
    template<class T>          inline constexpr bool is_nothrow_move_constructible_v      = is_nothrow_move_constructible<T>::value;
    template<class T, class U> inline constexpr bool is_nothrow_assignable_v              = is_nothrow_assignable<T, U>::value;
    template<class T>          inline constexpr bool is_nothrow_copy_assignable_v         = is_nothrow_copy_assignable<T>::value;
    template<class T>          inline constexpr bool is_nothrow_move_assignable_v         = is_nothrow_move_assignable<T>::value;
    template<class T, class U> inline constexpr bool is_nothrow_swappable_with_v          = is_nothrow_swappable_with<T, U>::value;
    template<class T>          inline constexpr bool is_nothrow_swappable_v               = is_nothrow_swappable<T>::value;
    template<class T>          inline constexpr bool is_nothrow_destructible_v            = is_nothrow_destructible<T>::value;
    template<class T>          inline constexpr bool has_virtual_destructor_v             = has_virtual_destructor<T>::value;
    template<class T>          inline constexpr bool has_unique_object_representations_v  = has_unique_object_representations<T>::value;

    // 23.15.5, type property queries
    template<class T>                 inline constexpr std::size_t alignment_of_v              = alignment_of<T>::value;
    template<class T>                 inline constexpr std::size_t rank_v                      = rank<T>::value;
    template<class T, unsigned I = 0> inline constexpr std::size_t extent_v                    = extent<T, I>::value;

    // 23.15.6, type relations
    template<class T, class U>                     inline constexpr bool is_same_v                = is_same<T, U>::value;
    template<class Base, class Derived>            inline constexpr bool is_base_of_v             = is_base_of<Base, Derived>::value;
    template<class From, class To>                 inline constexpr bool is_convertible_v         = is_convertible<From, To>::value;
    template<class Fn, class... ArgTypes>          inline constexpr bool is_invocable_v           = is_invocable<Fn, ArgTypes...>::value;
    template<class R, class Fn, class... ArgTypes> inline constexpr bool is_invocable_r_v         = is_invocable_r<R, Fn, ArgTypes...>::value;
    template<class Fn, class... ArgTypes>          inline constexpr bool is_nothrow_invocable_v   = is_nothrow_invocable<Fn, ArgTypes...>::value;
    template<class R, class Fn, class... ArgTypes> inline constexpr bool is_nothrow_invocable_r_v = is_nothrow_invocable_r<R, Fn, ArgTypes...>::value;

    // 23.15.8, logical operator traits
    template<class... B> inline constexpr bool conjunction_v = conjunction<B...>::value;
    template<class... B> inline constexpr bool disjunction_v = disjunction<B...>::value;
    template<class B>    inline constexpr bool negation_v    = negation<B>::value;
}

#endif /* __TYPE_TRAITS__ */
