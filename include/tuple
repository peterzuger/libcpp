/** -*- mode: c++ -*-
 * @file   libcpp/include/tuple
 * @author Peter Züger
 * @date   12.10.2018
 * @brief  std::tuple
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __TUPLE__
#define __TUPLE__

#include <__tuple>
#include <cstddef>

namespace std{
    // 23.5.3, class template tuple
    template<class... Types>
    class tuple;

    // 23.5.3.4, tuple creation functions
    //inline constexpr unspecified ignore;
    template<class... TTypes>
    constexpr tuple<TTypes...> make_tuple(TTypes&&...);
    template<class... TTypes>
    constexpr tuple<TTypes&&...> forward_as_tuple(TTypes&&...)noexcept;
    template<class... TTypes>
    constexpr tuple<TTypes&...> tie(TTypes&...)noexcept;
    template<class... Tuples>
    constexpr tuple<Tuples...> tuple_cat(Tuples&&...);

    // 23.5.3.5, calling a function with a tuple of arguments
    template<class F, class Tuple>
    constexpr decltype(auto) apply(F&& f, Tuple&& t);
    template<class T, class Tuple>
    constexpr T make_from_tuple(Tuple&& t);

    // 23.5.3.7, element access
    template<std::size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>& get(tuple<Types...>&)noexcept;
    template<std::size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&& get(tuple<Types...>&&)noexcept;
    template<std::size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>& get(const tuple<Types...>&)noexcept;

    template<std::size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>&& get(const tuple<Types...>&&)noexcept;
    template<class T, class... Types>
    constexpr T& get(tuple<Types...>& t)noexcept;
    template<class T, class... Types>
    constexpr T&& get(tuple<Types...>&& t)noexcept;
    template<class T, class... Types>
    constexpr const T& get(const tuple<Types...>& t)noexcept;
    template<class T, class... Types>
    constexpr const T&& get(const tuple<Types...>&& t)noexcept;

    // 23.5.3.8, relational operators
    template<class... TTypes, class... UTypes>
    constexpr bool operator==(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
    constexpr bool operator<(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
    constexpr bool operator!=(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
    constexpr bool operator>(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
    constexpr bool operator<=(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
    constexpr bool operator>=(const tuple<TTypes...>&, const tuple<UTypes...>&);

    /*
    // 23.5.3.9, allocator-related traits
    template<class... Types, class Alloc>
    struct uses_allocator<tuple<Types...>, Alloc>;
    */

    // 23.5.3.10, specialized algorithms
    template<class... Types>
    void swap(tuple<Types...>& x, tuple<Types...>& y)noexcept;

    // 23.5.3.6, tuple helper classes
    template<class T>
    inline constexpr std::size_t tuple_size_v = tuple_size<T>::value;
}

#endif /* __TUPLE__ */
