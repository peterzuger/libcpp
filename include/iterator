/**
 * @file   iterator
 * @author Peter Züger
 * @date   31.07.2018
 * @brief  std::iterator
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __ITERATOR__
#define __ITERATOR__

#include <__iterator_traits>
#include <initializer_list>
#include <cstddef>

namespace std{
    // 27.4.3, iterator operations
    namespace impl{
        template<class InputIterator, class Distance>
        inline void advance(InputIterator& i, Distance n, input_iterator_tag){
            for (; n > 0; --n)
                ++i;
        }

        template<class BiDirIterator, class Distance>
        inline void advance(BiDirIterator& i, Distance n, bidirectional_iterator_tag){
            if (n >= 0)
                for (; n > 0; --n)
                    ++i;
            else
                for (; n < 0; ++n)
                    --i;
        }

        template<class RandIterator, class Distance>
        inline void advance(RandIterator& i, Distance n, random_access_iterator_tag){
            i += n;
        }

        template<class InputIterator>
        inline typename iterator_traits<InputIterator>::difference_type
        distance(InputIterator first, InputIterator last, input_iterator_tag){
            typename iterator_traits<InputIterator>::difference_type r(0);
            for (; first != last; ++first)
                ++r;
            return r;
        }

        template<class RandIterator>
        inline typename iterator_traits<RandIterator>::difference_type
        distance(RandIterator first, RandIterator last, random_access_iterator_tag){
            return last - first;
        }
    }

    template<class InputIterator, class Distance>
    constexpr void advance(InputIterator& i, Distance n){
        impl::advance(i, n, typename iterator_traits<InputIterator>::iterator_category());
    }

    template<class InputIterator>
    constexpr typename iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last){
        return impl::distance(first, last, typename iterator_traits<InputIterator>::iterator_category());
    }

    template<class InputIterator>
    constexpr InputIterator next(InputIterator x,
                                 typename iterator_traits<InputIterator>::difference_type n = 1){
        advance(x, n);
        return x;
    }

    template<class BidirectionalIterator>
    constexpr BidirectionalIterator prev(BidirectionalIterator x,
                                         typename iterator_traits<BidirectionalIterator>::difference_type n = 1){
        advance(x, -n);
        return x;
    }

    // 27.5, predefined iterators
    template<class Iterator>
    class reverse_iterator{
    protected:
        Iterator current;

    public:
        using iterator_type     = Iterator;
        using iterator_category = typename iterator_traits<Iterator>::iterator_category;
        using value_type        = typename iterator_traits<Iterator>::value_type;
        using difference_type   = typename iterator_traits<Iterator>::difference_type;
        using pointer           = typename iterator_traits<Iterator>::pointer;
        using reference         = typename iterator_traits<Iterator>::reference;

        constexpr reverse_iterator():
            current{}{}

        constexpr explicit reverse_iterator(Iterator x):
            current{x.base()}{}

        template <class U>
        constexpr reverse_iterator(const reverse_iterator<U>& u):
            current{u.base()}{}

        template <class U>
        constexpr reverse_iterator& operator=(const reverse_iterator<U>& u){
            current = u.base();
            return *this;
        }

        constexpr Iterator base() const{
            return current;
        }
        constexpr reference operator*() const{
            Iterator tmp = current;
            return *--tmp;
        }
        constexpr pointer operator->() const{
            return std::addressof(operator*());
        }

        constexpr reverse_iterator& operator++(){
            --current;
            return *this;
        }
        constexpr reverse_iterator operator++(int){
            reverse_iterator tmp(*this);
            --current;
            return tmp;
        }
        constexpr reverse_iterator& operator--(){
            ++current;
            return *this;
        }
        constexpr reverse_iterator operator--(int){
            reverse_iterator tmp(*this);
            ++current;
            return tmp;
        }
        constexpr reverse_iterator operator+ (difference_type n) const{
            return reverse_iterator(current - n);
        }
        constexpr reverse_iterator& operator+=(difference_type n){
            current -= n;
            return *this;
        }
        constexpr reverse_iterator operator- (difference_type n) const{
            return reverse_iterator(current + n);
        }
        constexpr reverse_iterator& operator-=(difference_type n){
            current += n;
            return *this;
        }
        constexpr reference operator[](difference_type n) const{
            return *(*this + n);
        }
    };

    template<class Iterator1, class Iterator2>
    constexpr bool operator==(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() == y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator<(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() < y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator!=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() != y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator>(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() > y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator>=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() >= y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr bool operator<=(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y){
        return x.base() <= y.base();
    }
    template<class Iterator1, class Iterator2>
    constexpr auto operator-(
        const reverse_iterator<Iterator1>& x,
        const reverse_iterator<Iterator2>& y) ->decltype(y.base() - x.base()){
        return y.base() - x.base();
    }
    template<class Iterator>
    constexpr reverse_iterator<Iterator>
    operator+(
        typename reverse_iterator<Iterator>::difference_type n,
        const reverse_iterator<Iterator>& x){
        return reverse_iterator<Iterator>(x.base() - n);
    }

    template<class Iterator>
    constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i){
        return reverse_iterator<Iterator>(i);
    }

    template<class Container> class back_insert_iterator;
    template<class Container>
    back_insert_iterator<Container> back_inserter(Container& x);
    template<class Container> class front_insert_iterator;
    template<class Container>
    front_insert_iterator<Container> front_inserter(Container& x);
    template<class Container> class insert_iterator;
    template<class Container>
    insert_iterator<Container> inserter(Container& x, typename Container::iterator i);
    template<class Iterator> class move_iterator;
    template<class Iterator1, class Iterator2>
    constexpr bool operator==(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
    template<class Iterator1, class Iterator2>
    constexpr bool operator!=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
    template<class Iterator1, class Iterator2>
    constexpr bool operator<(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
    template<class Iterator1, class Iterator2>
    constexpr bool operator<=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
    template<class Iterator1, class Iterator2>
    constexpr bool operator>(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
    template<class Iterator1, class Iterator2>
    constexpr bool operator>=(
        const move_iterator<Iterator1>& x, const move_iterator<Iterator2>& y);
    template<class Iterator1, class Iterator2>
    constexpr auto operator-(
        const move_iterator<Iterator1>& x,
        const move_iterator<Iterator2>& y) -> decltype(x.base() - y.base());
    template<class Iterator>
    constexpr move_iterator<Iterator> operator+(
        typename move_iterator<Iterator>::difference_type n, const move_iterator<Iterator>& x);
    template<class Iterator>
    constexpr move_iterator<Iterator> make_move_iterator(Iterator i);
/*
    // 27.6, stream iterators
    template <class T, class charT = char, class traits = char_traits<charT>,
              class Distance = ptrdiff_t>
    class istream_iterator;
    template <class T, class charT, class traits, class Distance>
    bool operator==(const istream_iterator<T,charT,traits,Distance>& x,
                    const istream_iterator<T,charT,traits,Distance>& y);
    template <class T, class charT, class traits, class Distance>
    bool operator!=(const istream_iterator<T,charT,traits,Distance>& x,
                    const istream_iterator<T,charT,traits,Distance>& y);
    template <class T, class charT = char, class traits = char_traits<charT>>
    class ostream_iterator;
    template<class charT, class traits = char_traits<charT>>
    class istreambuf_iterator;
    template <class charT, class traits>
    bool operator==(const istreambuf_iterator<charT,traits>& a,
                    const istreambuf_iterator<charT,traits>& b);
    template <class charT, class traits>
    bool operator!=(const istreambuf_iterator<charT,traits>& a,
                    const istreambuf_iterator<charT,traits>& b);
    template <class charT, class traits = char_traits<charT>>
    class ostreambuf_iterator;
*/
    // 27.7, range access
    template<class C>
    constexpr auto begin(C& c) -> decltype(c.begin()){
        return c.begin();
    }

    template<class C>
    constexpr auto begin(const C& c) -> decltype(c.begin()){
        return c.begin();
    }

    template<class C>
    constexpr auto end(C& c) -> decltype(c.end()){
        return c.end();
    }

    template<class C>
    constexpr auto end(const C& c) -> decltype(c.end()){
        return c.end();
    }

    template<class T, size_t N>
    constexpr T* begin(T (&array)[N])noexcept{
        return array;
    }

    template<class T, size_t N>
    constexpr T* end(T (&array)[N])noexcept{
        return array + N;
    }

    template<class C>
    constexpr auto cbegin(const C& c)noexcept(noexcept(std::begin(c)))
        -> decltype(std::begin(c)){
        return std::begin(c);
    }

    template<class C>
    constexpr auto cend(const C& c)noexcept(noexcept(std::end(c)))
        -> decltype(std::end(c)){
        return std::end(c);
    }

    template<class C>
    constexpr auto rbegin(C& c) -> decltype(c.rbegin()){
        return c.rbegin();
    }

    template<class C>
    constexpr auto rbegin(const C& c) -> decltype(c.rbegin()){
        return c.rbegin();
    }

    template<class C>
    constexpr auto rend(C& c) -> decltype(c.rend()){
        return c.rend();
    }

    template<class C>
    constexpr auto rend(const C& c) -> decltype(c.rend()){
        return c.rend();
    }

    template<class T, size_t N>
    constexpr reverse_iterator<T*> rbegin(T (&array)[N]){
        return reverse_iterator<T*>(array + N);
    }

    template<class T, size_t N>
    constexpr reverse_iterator<T*> rend(T (&array)[N]){
        return reverse_iterator<T*>(array);
    }

    template<class E>
    constexpr reverse_iterator<const E*> rbegin(initializer_list<E> il){
        return reverse_iterator<const E*>(il.end());
    }

    template<class E>
    constexpr reverse_iterator<const E*> rend(initializer_list<E> il){
        return reverse_iterator<const E*>(il.begin());
    }

    template<class C>
    constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c)){
        return std::rbegin(c);
    }

    template<class C>
    constexpr auto crend(const C& c) -> decltype(std::rend(c)){
        return std::rend(c);
    }


    // 27.8, container access
    template<class C>
    constexpr auto size(const C& c) -> decltype(c.size()){
        return c.size();
    }

    template<class T, size_t N>
    constexpr size_t size(const T (&)[N])noexcept{
        return N;
    }

    template<class C>
    constexpr auto empty(const C& c) -> decltype(c.empty()){
        return c.empty();
    }

    template<class T, size_t N>
    constexpr bool empty(const T (&)[N])noexcept{
        return false;
    }

    template<class E>
    constexpr bool empty(initializer_list<E> il)noexcept{
        return il.size() == 0;
    }

    template<class C>
    constexpr auto data(C& c) -> decltype(c.data()){
        return c.data();
    }

    template<class C>
    constexpr auto data(const C& c) -> decltype(c.data()){
        return c.data();
    }

    template<class T, size_t N>
    constexpr T* data(T (&array)[N])noexcept{
        return array;
    }

    template<class E>
    constexpr const E* data(initializer_list<E> il)noexcept{
        return il.begin();
    }
}

#endif /* __ITERATOR__ */
