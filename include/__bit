/** -*- mode: c++ -*-
 * @file   libcpp/include/__bit
 * @author Peter Züger
 * @date   22.12.2019
 * @brief  bit references and iterators(pointers)
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ____BIT__
#define ____BIT__

#include <cstddef>

namespace std{
    struct __bit_reference{
        using pointer   = char*;
        using size_type = std::size_t;

        __bit_reference(pointer _p, size_type _mask)noexcept:
            p{_p}, mask{_mask}{}

        operator bool()const noexcept{
            return static_cast<bool>(*p & mask);
        }

        bool operator~()const noexcept{
            *p ^= mask;
            return bool(*this);
        }

        __bit_reference& operator=(const bool x)noexcept{
            if(x)*p |= mask;
            else *p &= ~mask;
            return *this;
        }

        __bit_reference& operator=(const __bit_reference& x)noexcept{
            return operator=(bool(x));
        }

        void flip()noexcept{ // flips the bit
            *p ^= mask;
        }

    private:
        pointer p;
        size_type mask;
    };

    struct __bit_iterator{};
}

#endif /* ____BIT__ */
