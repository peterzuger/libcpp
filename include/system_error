/** -*- mode: c++ -*-
 * @file   libcpp/include/system_error
 * @author Peter Züger
 * @date   14.05.2019
 * @brief  System error support
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __SYSTEM_ERROR__
#define __SYSTEM_ERROR__

#include <type_traits>
#include <stdexcept>
#include <__stringfwd>

namespace std{
    // forward declarations
    class error_code;
    class error_condition;

    class error_category{
    public:
        constexpr error_category()noexcept;
        virtual ~error_category();
        error_category(const error_category&) = delete;
        error_category& operator=(const error_category&) = delete;
        virtual const char* name()const noexcept = 0;

        virtual error_condition default_error_condition(int ev)const noexcept;
        virtual bool equivalent(int code, const error_condition& condition)const noexcept;
        virtual bool equivalent(const error_code& code, int condition)const noexcept;
        virtual std::string message(int ev)const = 0;

        bool operator==(const error_category& rhs)const noexcept;
        bool operator!=(const error_category& rhs)const noexcept;
        bool operator<(const error_category& rhs)const noexcept;
    };

    const error_category& generic_category()noexcept;
    const error_category& system_category()noexcept;

    class error_code{
    public:
        // 22.5.3.2, constructors
        error_code() noexcept;
        error_code(int val, const error_category& cat)noexcept;
        template<class ErrorCodeEnum>
        error_code(ErrorCodeEnum e)noexcept;

        // 22.5.3.3, modifiers
        void assign(int val, const error_category& cat)noexcept;
        template <class ErrorCodeEnum>error_code& operator=(ErrorCodeEnum e)noexcept;
        void clear()noexcept;

        // 22.5.3.4, observers
        int value()const noexcept;
        const error_category& category()const noexcept;
        error_condition default_error_condition()const noexcept;
        std::string message()const;
        explicit operator bool()const noexcept;

    private:
        int val_;
        const error_category* cat_;
    };

    class error_condition{
    public:
        // 22.5.4.2, constructors
        error_condition()noexcept;
        error_condition(int val, const error_category& cat)noexcept:
            val_{val},
            cat_{&cat}{}
        template<class ErrorConditionEnum>
        error_condition(ErrorConditionEnum e)noexcept;

        // 22.5.4.3, modifiers
        void assign(int val, const error_category& cat)noexcept;

        template<class ErrorConditionEnum>
        error_condition& operator=(ErrorConditionEnum e)noexcept;

        void clear()noexcept{
            val_ = 0;
            cat_ = &generic_category();
        }

        // 22.5.4.4, observers
        int value()const noexcept{
            return val_;
        }
        const error_category& category()const noexcept{
            return *cat_;
        }
        std::string message()const;
        explicit operator bool()const noexcept{
            return value() != 0;
        }

    private:
        int val_;
        const error_category* cat_;
    };

    error_condition error_category::default_error_condition(int ev)const noexcept{
        return error_condition(ev, *this);
    }
    bool error_category::equivalent(int code, const error_condition& condition)const noexcept{
        return condition.value() == code;
    }
    bool error_category::equivalent(const error_code& code, int condition)const noexcept{
        return *this == code.category() && code.value() == condition;
    }

    class system_error: public std::runtime_error{
    public:
        system_error(error_code ec, const std::string& what_arg);
        system_error(error_code ec, const char* what_arg);
        system_error(error_code ec);
        system_error(int ev, const error_category& ecat, const std::string& what_arg);
        system_error(int ev, const error_category& ecat, const char* what_arg);
        system_error(int ev, const error_category& ecat);const error_code& code()const noexcept;
        const char* what()const noexcept override;
    };

    template<class T>
    struct is_error_code_enum: public std::false_type{};

    template<class T>
    struct is_error_condition_enum: public std::false_type{};

    enum class errc{
        address_family_not_supported,       //EAFNOSUPPORT
        address_in_use,                     //EADDRINUSE
        address_not_available,              //EADDRNOTAVAIL
        already_connected,                  //EISCONN
        argument_list_too_long,             //E2BIG
        argument_out_of_domain,             //EDOM
        bad_address,                        //EFAULT
        bad_file_descriptor,                //EBADF
        bad_message,                        //EBADMSG
        broken_pipe,                        //EPIPE
        connection_aborted,                 //ECONNABORTED
        connection_already_in_progress,     //EALREADY
        connection_refused,                 //ECONNREFUSED
        connection_reset,                   //ECONNRESET
        cross_device_link,                  //EXDEV
        destination_address_required,       //EDESTADDRREQ
        device_or_resource_busy,            //EBUSY
        directory_not_empty,                //ENOTEMPTY
        executable_format_error,            //ENOEXEC
        file_exists,                        //EEXIST
        file_too_large,                     //EFBIG
        filename_too_long,                  //ENAMETOOLONG
        function_not_supported,             //ENOSYS
        host_unreachable,                   //EHOSTUNREACH
        identifier_removed,                 //EIDRM
        illegal_byte_sequence,              //EILSEQ
        inappropriate_io_control_operation, //ENOTTY
        interrupted,                        //EINTR
        invalid_argument,                   //EINVAL
        invalid_seek,                       //ESPIPE
        io_error,                           //EIO
        is_a_directory,                     //EISDIR
        message_size,                       //EMSGSIZE
        network_down,                       //ENETDOWN
        network_reset,                      //ENETRESET
        network_unreachable,                //ENETUNREACH
        no_buffer_space,                    //ENOBUFS
        no_child_process,                   //ECHILD
        no_link,                            //ENOLINK
        no_lock_available,                  //ENOLCK
        no_message_available,               //ENODATA
        no_message,                         //ENOMSG
        no_protocol_option,                 //ENOPROTOOPT
        no_space_on_device,                 //ENOSPC
        no_stream_resources,                //ENOSR
        no_such_device_or_address,          //ENXIO
        no_such_device,                     //ENODEV
        no_such_file_or_directory,          //ENOENT
        no_such_process,                    //ESRCH
        not_a_directory,                    //ENOTDIR
        not_a_socket,                       //ENOTSOCK
        not_a_stream,                       //ENOSTR
        not_connected,                      //ENOTCONN
        not_enough_memory,                  //ENOMEM
        not_supported,                      //ENOTSUP
        operation_canceled,                 //ECANCELED
        operation_in_progress,              //EINPROGRESS
        operation_not_permitted,            //EPERM
        operation_not_supported,            //EOPNOTSUPP
        operation_would_block,              //EWOULDBLOCK
        owner_dead,                         //EOWNERDEAD
        permission_denied,                  //EACCES
        protocol_error,                     //EPROTO
        protocol_not_supported,             //EPROTONOSUPPORT
        read_only_file_system,              //EROFS
        resource_deadlock_would_occur,      //EDEADLK
        resource_unavailable_try_again,     //EAGAIN
        result_out_of_range,                //ERANGE
        state_not_recoverable,              //ENOTRECOVERABLE
        stream_timeout,                     //ETIME
        text_file_busy,                     //ETXTBSY
        timed_out,                          //ETIMEDOUT
        too_many_files_open_in_system,      //ENFILE
        too_many_files_open,                //EMFILE
        too_many_links,                     //EMLINK
        too_many_symbolic_link_levels,      //ELOOP
        value_too_large,                    //EOVERFLOW
        wrong_protocol_type,                //EPROTOTYPE
    };

    template<> struct is_error_condition_enum<errc> : std::true_type{};

    // 22.5.3.5, non-member functions
    error_code make_error_code(errc e)noexcept;

    template<class charT, class traits>
    std::basic_ostream<charT, traits>&operator<<(std::basic_ostream<charT, traits>& os, const error_code& ec);

    // 22.5.4.5, non-member functions
    error_condition make_error_condition(errc e)noexcept{
        return error_condition(static_cast<int>(e), generic_category());
    }

    // 22.5.5, comparison functions
    bool operator<(const error_code& lhs, const error_code& rhs)noexcept{
        return lhs.category() < rhs.category() ||
                                (lhs.category() == rhs.category() && lhs.value() < rhs.value());
    }
    bool operator<(const error_condition& lhs, const error_condition& rhs)noexcept{
        return lhs.category() < rhs.category() ||
                                (lhs.category() == rhs.category() && lhs.value() < rhs.value());
    }

    bool operator==(const error_code& lhs, const error_code& rhs)noexcept{
        return lhs.category() == rhs.category() && lhs.value() == rhs.value();
    }
    bool operator==(const error_code& lhs, const error_condition& rhs)noexcept{
        return lhs.category().equivalent(lhs.value(), rhs) || rhs.category().equivalent(lhs, rhs.value());
    }
    bool operator==(const error_condition& lhs, const error_code& rhs)noexcept{
        return rhs.category().equivalent(rhs.value(), lhs) || lhs.category().equivalent(rhs, lhs.value());
    }
    bool operator==(const error_condition& lhs, const error_condition& rhs)noexcept{
        return lhs.category() == rhs.category() && lhs.value() == rhs.value();
    }

    bool operator!=(const error_code& lhs, const error_code& rhs)noexcept{
        return !(lhs == rhs);
    }
    bool operator!=(const error_code& lhs, const error_condition& rhs)noexcept{
        return !(lhs == rhs);
    }
    bool operator!=(const error_condition& lhs, const error_code& rhs)noexcept{
        return !(lhs == rhs);
    }
    bool operator!=(const error_condition& lhs, const error_condition& rhs)noexcept{
        return !(lhs == rhs);
    }

    // 22.5.6, hash support
    template<class T>
    struct hash;

    template<>
    struct hash<error_code>;

    template<>
    struct hash<error_condition>;

    // 22.5, system error support
    template <class T>inline constexpr bool is_error_code_enum_v = is_error_code_enum<T>::value;
    template <class T>inline constexpr bool is_error_condition_enum_v = is_error_condition_enum<T>::value;
}

#endif /* __SYSTEM_ERROR__ */
