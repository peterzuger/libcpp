/** -*- mode: c++ -*-
 * @file   libcpp/include/iomanip
 * @author Peter Züger
 * @date   14.05.2019
 * @brief  Formatting and manipulators
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __IOMANIP__
#define __IOMANIP__

#include <ios>
#include <string_view>

namespace std{
    struct __iomanip_t1{
        ios_base::fmtflags mask;
        explicit __iomanip_t1(ios_base::fmtflags m): mask{m}{}
    };

    template<class CharT, class Traits>
    basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& is, const __iomanip_t1& x){
        is.setf(ios_base::fmtflags(0), x.mask);
        return is;
    }

    template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>& os, const __iomanip_t1& x){
        os.setf(ios_base::fmtflags(0), x.mask);
        return os;
    }


    struct __iomanip_t2{
        ios_base::fmtflags mask;
        explicit __iomanip_t2(ios_base::fmtflags m): mask{m}{}
    };

    template<class CharT, class Traits>
    basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& is, const __iomanip_t2& x){
        is.setf(x.mask);
        return is;
    }

    template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>& os, const __iomanip_t2& x){
        os.setf(x.mask);
        return os;
    }


    struct __iomanip_t3{
        int base;
        explicit __iomanip_t3(int b): base{b}{}
    };

    template<class CharT, class Traits>
    basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& is, const __iomanip_t3& x){
        is.setf(x.base ==  8 ? ios_base::oct :
                x.base == 10 ? ios_base::dec :
                x.base == 16 ? ios_base::hex :
                ios_base::fmtflags(0), ios_base::basefield);
        return is;
    }

    template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>& os, const __iomanip_t3& x){
        os.setf(x.base ==  8 ? ios_base::oct :
                x.base == 10 ? ios_base::dec :
                x.base == 16 ? ios_base::hex :
                ios_base::fmtflags(0), ios_base::basefield);
        return os;
    }


    template<class CharT>
    struct __iomanip_t4{
        CharT c;
        explicit __iomanip_t4(CharT _c): c{_c}{}
    };

    template<class CharT, class Traits>
    basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& is, const __iomanip_t4<CharT>& x){
        is.fill(x.c);
        return is;
    }

    template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>& os, const __iomanip_t4<CharT>& x){
        os.fill(x.c);
        return os;
    }


    struct __iomanip_t5{
        int n;
        explicit __iomanip_t5(int _n): n{_n}{}
    };

    template<class CharT, class Traits>
    basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& is, const __iomanip_t5& x){
        is.precision(x.n);
        return is;
    }

    template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>& os, const __iomanip_t5& x){
        os.precision(x.n);
        return os;
    }


    struct __iomanip_t6{
        int n;
        explicit __iomanip_t6(int _n): n{_n}{}
    };

    template<class CharT, class Traits>
    basic_istream<CharT, Traits>& operator>>(basic_istream<CharT, Traits>& is, const __iomanip_t6& x){
        is.width(x.n);
        return is;
    }

    template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(basic_ostream<CharT, Traits>& os, const __iomanip_t6& x){
        os.width(x.n);
        return os;
    }

    struct __iomanip_t7{};
    struct __iomanip_t8{};
    struct __iomanip_t9{};
    struct __iomanip_t10{};
    struct __iomanip_t11{};
    struct __iomanip_t12{};
    struct __iomanip_t13{};
    struct __iomanip_t14{};

    // types T1,T2, ... are unspecified implementation types
    __iomanip_t1 resetiosflags(ios_base::fmtflags mask){
        return __iomanip_t1(mask);
    }
    __iomanip_t2 setiosflags  (ios_base::fmtflags mask){
        return __iomanip_t2(mask);
    }
    __iomanip_t3 setbase(int base){
        return __iomanip_t3(base);
    }

    template<class charT>
    __iomanip_t4<charT> setfill(charT c){
        return __iomanip_t4<charT>(c);
    }
    __iomanip_t5 setprecision(int n){
        return __iomanip_t5(n);
    }
    __iomanip_t6 setw(int n){
        return __iomanip_t6(n);
    }

    template<class moneyT>
    __iomanip_t7 get_money(moneyT& mon, bool intl = false);

    template<class moneyT>
    __iomanip_t8 put_money(const moneyT& mon, bool intl = false);

    template<class charT>
    __iomanip_t9 get_time(struct tm* tmb, const charT* fmt);

    template<class charT>
    __iomanip_t10 put_time(const struct tm* tmb, const charT* fmt);

    template<class charT>
    __iomanip_t11 quoted(const charT* s, charT delim = charT('"'), charT escape = charT('\\'));

    template<class charT, class traits, class Allocator>
    __iomanip_t12 quoted(const basic_string<charT, traits, Allocator>& s,
                         charT delim = charT('"'), charT escape = charT('\\'));

    template<class charT, class traits, class Allocator>
    __iomanip_t13 quoted(basic_string<charT, traits, Allocator>& s,
                         charT delim = charT('"'), charT escape = charT('\\'));

    template<class charT, class traits>
    __iomanip_t14 quoted(basic_string_view<charT, traits> s,
                         charT delim = charT('"'), charT escape = charT('\\'));
}

#endif /* __IOMANIP__ */
