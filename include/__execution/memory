/** -*- mode: c++ -*-
 * @file   libcpp/include/__execution/memory
 * @author Peter Züger
 * @date   26.10.2019
 * @brief  algorithms with excecution policy's
 * @note   defined in header <memory>
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ____EXCECUTION_MEMORY__
#define ____EXCECUTION_MEMORY__

#include <utility>

namespace std{
    template<class ExecutionPolicy, class ForwardIterator>
    void uninitialized_default_construct(ExecutionPolicy&& exec, // see 28.4.5
                                         ForwardIterator first, ForwardIterator last);

    template<class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator uninitialized_default_construct_n(ExecutionPolicy&& exec,// see 28.4.5
                                                      ForwardIterator first, Size n);

    template <class ExecutionPolicy, class ForwardIterator>
    void uninitialized_value_construct(ExecutionPolicy&& exec,// see 28.4.5
                                       ForwardIterator first, ForwardIterator last);

    template<class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator uninitialized_value_construct_n(ExecutionPolicy&& exec,// see 28.4.5
                                                    ForwardIterator first, Size n);

    template<class ExecutionPolicy, class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_copy(ExecutionPolicy&& exec,// see 28.4.5
                                       InputIterator first, InputIterator last,ForwardIterator result);

    template<class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
    ForwardIterator uninitialized_copy_n(ExecutionPolicy&& exec,// see 28.4.5
                                         InputIterator first, Size n,ForwardIterator result);

    template<class ExecutionPolicy, class InputIterator, class ForwardIterator>
    ForwardIterator uninitialized_move(ExecutionPolicy&& exec,// see 28.4.5
                                       InputIterator first, InputIterator last,ForwardIterator result);

    template<class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
    std::pair<InputIterator, ForwardIterator>uninitialized_move_n(ExecutionPolicy&& exec,// see 28.4.5
                                                                  InputIterator first, Size n,
                                                                  ForwardIterator result);

    template <class ExecutionPolicy, class ForwardIterator, class T>
    void uninitialized_fill(ExecutionPolicy&& exec,// see 28.4.5
                            ForwardIterator first, ForwardIterator last,const T& x);

    template<class ExecutionPolicy, class ForwardIterator, class Size, class T>
    ForwardIterator uninitialized_fill_n(ExecutionPolicy&& exec,// see 28.4.5
                                         ForwardIterator first, Size n, const T& x);

    template<class ExecutionPolicy, class ForwardIterator>
    void destroy(ExecutionPolicy&& exec,// see 28.4.5
                 ForwardIterator first, ForwardIterator last);

    template<class ExecutionPolicy, class ForwardIterator, class Size>
    ForwardIterator destroy_n(ExecutionPolicy&& exec,// see 28.4.5
                              ForwardIterator first, Size n);
}

#endif /* ____EXCECUTION_MEMORY__ */
