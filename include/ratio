/** -*- mode: c++ -*-
 * @file   libcpp/include/ratio
 * @author Peter Züger
 * @date   14.05.2019
 * @brief  23.16 Compile-time rational arithmetic
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __RATIO__
#define __RATIO__

#include <cstdint>
#include <type_traits>

namespace std{
    // 23.16.3, class template ratio
    template<intmax_t N, intmax_t D = 1>
    class ratio{
    public:
        static constexpr intmax_t num = N;
        static constexpr intmax_t den = D;
        using type = ratio<num, den>;
    };

    // 23.16.4, ratio arithmetic
    template<class R1, class R2>
    using ratio_add = ratio<R1::num * R2::den + R2::num * R1::den, R1::den * R2::den>;

    template<class R1, class R2>
    using ratio_subtract = ratio<R1::num * R2::den - R2::num * R1::den, R1::den * R2::den>;

    template<class R1, class R2>
    using ratio_multiply = ratio<R1::num * R2::num, R1::den * R2::den>;

    template<class R1, class R2>
    using ratio_divide = ratio<R1::num * R2::den, R1::den * R2::num>;

    // 23.16.5, ratio comparison
    template<class R1, class R2>
    struct ratio_equal: std::bool_constant<R1::num == R2::num && R1::den == R2::den>{};

    template<class R1, class R2>
    struct ratio_not_equal: std::bool_constant<!ratio_equal<R1, R2>::value>{};

    template<class R1, class R2>
    struct ratio_less: std::bool_constant<R1::num * R2::den < R2::num * R1::den>{};

    template<class R1, class R2>
    struct ratio_less_equal: std::bool_constant<!ratio_less<R2, R1>::value>{};

    template<class R1, class R2>
    struct ratio_greater: std::bool_constant<ratio_less<R2, R1>::value>{};

    template<class R1, class R2>
    struct ratio_greater_equal: std::bool_constant<!ratio_less<R1, R2>::value>{};

    template<class R1, class R2>inline constexpr bool ratio_equal_v         = ratio_equal<R1, R2>::value;
    template<class R1, class R2>inline constexpr bool ratio_not_equal_v     = ratio_not_equal<R1, R2>::value;
    template<class R1, class R2>inline constexpr bool ratio_less_v          = ratio_less<R1, R2>::value;
    template<class R1, class R2>inline constexpr bool ratio_less_equal_v    = ratio_less_equal<R1, R2>::value;
    template<class R1, class R2>inline constexpr bool ratio_greater_v       = ratio_greater<R1, R2>::value;
    template<class R1, class R2>inline constexpr bool ratio_greater_equal_v = ratio_greater_equal<R1, R2>::value;

    // 23.16.6, convenience SI typedefs
    //using yocto = ratio<1, 1000000000000000000000000>;
    //using zepto = ratio<1,    1000000000000000000000>;
    using atto  = ratio<1,       1000000000000000000>;
    using femto = ratio<1,          1000000000000000>;
    using pico  = ratio<1,             1000000000000>;
    using nano  = ratio<1,                1000000000>;
    using micro = ratio<1,                   1000000>;
    using milli = ratio<1,                      1000>;
    using centi = ratio<1,                       100>;
    using deci  = ratio<1,                        10>;
    using deca  = ratio<                       10, 1>;
    using hecto = ratio<                      100, 1>;
    using kilo  = ratio<                     1000, 1>;
    using mega  = ratio<                  1000000, 1>;
    using giga  = ratio<               1000000000, 1>;
    using tera  = ratio<            1000000000000, 1>;
    using peta  = ratio<         1000000000000000, 1>;
    using exa   = ratio<      1000000000000000000, 1>;
    //using zetta = ratio<   1000000000000000000000, 1>;
    //using yotta = ratio<1000000000000000000000000, 1>;
}

#endif /* __RATIO__ */
