/** -*- mode: c++ -*-
 * @file   libcpp/include/bitset
 * @author Peter Züger
 * @date   14.05.2019
 * @brief  Bitsets
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __BITSET__
#define __BITSET__

#include <__bit>
#include <cstddef>
#include <string>
#include <iosfwd> // for istream (30.7.1), ostream (30.7.2), see 30.3.1

namespace std{
    template<size_t N>
    class bitset{
    public:
        // 23.9.2.1, constructors
        constexpr bitset()noexcept;
        constexpr bitset(unsigned long long val)noexcept;

        template<class charT, class traits, class Allocator>
        explicit bitset(const basic_string<charT, traits, Allocator>& str,
                        typename basic_string<charT, traits, Allocator>::size_type pos = 0,
                        typename basic_string<charT, traits, Allocator>::size_type n =
                        basic_string<charT, traits, Allocator>::npos,
                        charT zero = charT('0'), charT one = charT('1'));

        template<class charT>
        explicit bitset(const charT* str,
                        typename basic_string<charT>::size_type n = basic_string<charT>::npos,
                        charT zero = charT('0'), charT one = charT('1'));

        // 23.9.2.2, bitset operations
        bitset<N>& operator&=(const bitset<N>& rhs)noexcept;
        bitset<N>& operator|=(const bitset<N>& rhs)noexcept;
        bitset<N>& operator^=(const bitset<N>& rhs)noexcept;
        bitset<N>& operator<<=(size_t pos)noexcept;
        bitset<N>& operator>>=(size_t pos)noexcept;
        bitset<N>& set()noexcept;
        bitset<N>& set(size_t pos, bool val = true);
        bitset<N>& reset()noexcept;
        bitset<N>& reset(size_t pos);
        bitset<N>  operator~()const noexcept;
        bitset<N>& flip()noexcept;
        bitset<N>& flip(size_t pos);

        // element access:
        constexpr bool operator[](size_t pos)const;// forb[i];
        __bit_reference operator[](size_t pos);// forb[i];

        unsigned long to_ulong()const;
        unsigned long long to_ullong()const;

        template<class charT = char, class traits = char_traits<charT>,
                 class Allocator = allocator<charT>>
        basic_string<charT, traits, Allocator>to_string(charT zero = charT('0'),
                                                        charT one = charT('1'))const;

        size_t count()const noexcept;
        constexpr size_t size()const noexcept;
        bool operator==(const bitset<N>& rhs)const noexcept;
        bool operator!=(const bitset<N>& rhs)const noexcept;
        bool test(size_t pos)const;
        bool all()const noexcept;
        bool any()const noexcept;
        bool none()const noexcept;
        bitset<N> operator<<(size_t pos)const noexcept;
        bitset<N> operator>>(size_t pos)const noexcept;
    };

    // 23.9.3, hash support
    template<class T>
    struct hash;

    template<size_t N>
    struct hash<bitset<N>>;

    // 23.9.4, bitset operators
    template<size_t N>
    bitset<N> operator&(const bitset<N>&, const bitset<N>&)noexcept;

    template<size_t N>
    bitset<N> operator|(const bitset<N>&, const bitset<N>&)noexcept;

    template<size_t N>
    bitset<N> operator^(const bitset<N>&, const bitset<N>&)noexcept;

    template<class charT, class traits, size_t N>
    std::basic_istream<charT, traits>&
    operator>>(std::basic_istream<charT, traits>& is, bitset<N>& x);

    template<class charT, class traits, size_t N>
    std::basic_ostream<charT, traits>&
    operator<<(std::basic_ostream<charT, traits>& os, const bitset<N>& x);
}

#endif /* __BITSET__ */
