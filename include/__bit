/** -*- mode: c++ -*-
 * @file   libcpp/include/__bit
 * @author Peter Züger
 * @date   22.12.2019
 * @brief  bit references and iterators(pointers)
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ____BIT__
#define ____BIT__

#include <cstddef>

namespace std{
    struct __bit_reference{
        using pointer   = char*;
        using size_type = std::size_t;

        __bit_reference(pointer _p, size_type bit)noexcept:
            p{_p}, mask{static_cast<size_type>(0b1 << bit)}{}

        operator bool()const noexcept{
            return static_cast<bool>(*p & mask);
        }

        bool operator~()const noexcept{
            *p ^= mask;
            return bool(*this);
        }

        __bit_reference& operator=(const bool x)noexcept{
            if(x)*p |= mask;
            else *p &= ~mask;
            return *this;
        }

        __bit_reference& operator=(const __bit_reference& x)noexcept{
            return operator=(bool(x));
        }

        void flip()noexcept{ // flips the bit
            *p ^= mask;
        }

    private:
        pointer p;
        size_type mask;
    };

    struct __bit_iterator{
        using difference_type   = std::ptrdiff_t;
        using value_type        = bool;
        using pointer           = char*;
        using reference         = __bit_reference;
        using iterator_category = void;

        __bit_iterator(pointer _p, std::size_t _bit)noexcept
            : p{_p}, bit{_bit}{}

        __bit_iterator()noexcept: p(nullptr), bit(0){}

        __bit_iterator(const __bit_iterator& other) = default;

        reference operator*()const noexcept{
            return reference(p, 1 << bit);
        }

        __bit_iterator& operator++(){
            if(bit == 7){
                bit = 0;
                ++p;
            }else{
                ++bit;
            }
            return *this;
        }

        __bit_iterator operator++(int){
            __bit_iterator tmp = *this;
            ++(*this);
            return tmp;
        }

        __bit_iterator& operator--(){
            if(!bit){
                bit = 7;
                --p;
            }else{
                --bit;
            }
            return *this;
        }

        __bit_iterator operator--(int){
            __bit_iterator tmp = *this;
            --(*this);
            return tmp;
        }

        __bit_iterator operator+(difference_type n)const{
            __bit_iterator t(*this);
            t += n;
            return t;
        }

        __bit_iterator& operator+=(difference_type n){
            if(n >= 0){
                p += (n + static_cast<difference_type>(bit)) / 8;
                bit = (n + static_cast<difference_type>(bit)) % 8;
            }else{
                return operator-=(-n);
            }
            return *this;
        }

        __bit_iterator operator-(difference_type n)const{
            __bit_iterator t(*this);
            t -= n;
            return t;
        }

        __bit_iterator& operator-=(difference_type n){
            if(n >= 0){
                p -= (n + static_cast<difference_type>(bit)) / 8;
                bit = (n + static_cast<difference_type>(bit)) % 8;
            }else{
                return operator+=(-n);
            }
            return *this;
        }

        reference operator[](difference_type n)const{
            return *(*this + n);
        }

        char* p;
        std::size_t bit;
    };

    constexpr bool operator==(const __bit_iterator& x,
                              const __bit_iterator& y){
        return (x.p == y.p) && (x.bit == y.bit);
    }

    constexpr bool operator!=(const __bit_iterator& x,
                              const __bit_iterator& y){
        return !(x == y);
    }
}

#endif /* ____BIT__ */
