/**
 * @file   typeindex
 * @author Peter Züger
 * @date   08.05.2019
 * @brief  std::type_index
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __TYPEINDEX__
#define __TYPEINDEX__

#include <typeinfo>

namespace std{
    class type_index{
        const std::type_info* target;
        // Note that the use of a pointer here, rather than a reference,
        // means that the default copy/move constructor and assignment
        // operators will be provided and work as expected.

    public:
        type_index(const std::type_info& rhs)noexcept:
            target{&rhs}{}

        std::size_t hash_code()const noexcept{
            return target->hash_code();
        }
        const char* name()const noexcept{
            return target->name();
        }

        bool operator< (const type_index& rhs)const noexcept{
            return target->before(*rhs.target);
        }
        bool operator<= (const type_index& rhs)const noexcept{
            return !rhs.target->before(*target);
        }
        bool operator> (const type_index& rhs)const noexcept{
            return rhs.target->before(*target);
        }
        bool operator>= (const type_index& rhs)const noexcept{
            return !target->before(*rhs.target);
        }

        bool operator==(const type_index& rhs)const noexcept{
            return *target == *rhs.target;
        }
        bool operator!=(const type_index& rhs)const noexcept{
            return *target != *rhs.target;
        }
    };


    template <class T>
    struct hash;

    template<>
    struct hash<type_index>{
        std::size_t operator()(std::type_index index)const noexcept{
            return index.hash_code();
        }
    };
}

#endif /* __TYPEINDEX__ */
