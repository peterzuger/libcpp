/**
 * @file   libcpp/include/stdexcept
 * @author Peter Züger
 * @date   26.11.2018
 * @brief  exception classes
 *
 * This file is part of libcpp (https://gitlab.com/peterzuger/libcpp).
 * Copyright (c) 2019 Peter Züger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __STDEXCEPT__
#define __STDEXCEPT__

#include <exception>
#include <__stringfwd>

namespace std{
    class logic_error: public exception{
    public:
        explicit logic_error(const string& what_arg);
        explicit logic_error(const char* what_arg);

        logic_error(const logic_error& err)noexcept;
        logic_error& operator=(const logic_error& err)noexcept;

        virtual ~logic_error()noexcept;

        virtual const char* what()const noexcept;
    };


    class domain_error: public logic_error{
    public:
        explicit domain_error(const string& what_arg): logic_error(what_arg){}
        explicit domain_error(const char* what_arg)  : logic_error(what_arg){}

        virtual ~domain_error()noexcept;
    };


    class invalid_argument: public logic_error{
    public:
        explicit invalid_argument(const string& what_arg): logic_error(what_arg){}
        explicit invalid_argument(const char* what_arg)  : logic_error(what_arg){}

        virtual ~invalid_argument()noexcept;
    };


    class length_error: public logic_error{
    public:
        explicit length_error(const string& what_arg): logic_error(what_arg){}
        explicit length_error(const char* what_arg)  : logic_error(what_arg){}

        virtual ~length_error()noexcept;
    };


    class out_of_range: public logic_error{
    public:
        explicit out_of_range(const string& what_arg): logic_error(what_arg){}
        explicit out_of_range(const char* what_arg)  : logic_error(what_arg){}

        virtual ~out_of_range()noexcept;
    };


    class runtime_error: public exception{
    public:
        explicit runtime_error(const string& what_arg);
        explicit runtime_error(const char* what_arg);

        runtime_error(const runtime_error& err)noexcept;
        runtime_error& operator=(const runtime_error& err)noexcept;

        virtual ~runtime_error()noexcept;

        virtual const char* what()const noexcept;
    };


    class range_error: public runtime_error{
    public:
        explicit range_error(const string& what_arg): runtime_error(what_arg){}
        explicit range_error(const char* what_arg)  : runtime_error(what_arg){}

        virtual ~range_error()noexcept;
    };


    class overflow_error: public runtime_error{
    public:
        explicit overflow_error(const string& what_arg): runtime_error(what_arg){}
        explicit overflow_error(const char* what_arg)  : runtime_error(what_arg){}

        virtual ~overflow_error()noexcept;
    };


    class underflow_error: public runtime_error{
    public:
        explicit underflow_error(const string& what_arg): runtime_error(what_arg){}
        explicit underflow_error(const char* what_arg)  : runtime_error(what_arg){}

        virtual ~underflow_error()noexcept;
    };
}

namespace std{
    [[noreturn]] inline void __throw_logic_error(const char* s){
        #if defined(__cpp_exceptions)
        throw logic_error(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_domain_error(const char* s){
        #if defined(__cpp_exceptions)
        throw domain_error(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_invalid_argument(const char* s){
        #if defined(__cpp_exceptions)
        throw invalid_argument(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_length_error(const char* s){
        #if defined(__cpp_exceptions)
        throw length_error(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_out_of_range(const char* s){
        #if defined(__cpp_exceptions)
        throw out_of_range(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_runtime_error(const char* s){
        #if defined(__cpp_exceptions)
        throw runtime_error(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_range_error(const char* s){
        #if defined(__cpp_exceptions)
        throw range_error(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_overflow_error(const char* s){
        #if defined(__cpp_exceptions)
        throw overflow_error(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }

    [[noreturn]] inline void __throw_underflow_error(const char* s){
        #if defined(__cpp_exceptions)
        throw underflow_error(s);
        #else
        (void)s;
        terminate();
        #endif /* defined(__cpp_exceptions) */
    }
}

#endif /* __STDEXCEPT__ */
